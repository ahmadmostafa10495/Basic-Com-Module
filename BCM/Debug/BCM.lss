
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000118e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000118e  00001222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007a  008000a0  008000a0  00001262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001262  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000195c  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096c  00000000  00000000  00002e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009fe  00000000  00000000  0000379a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b8  00000000  00000000  00004198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000082c  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a2b  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00006aa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 8b 03 	jmp	0x716	; 0x716 <__vector_5>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__vector_9>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__vector_13>
      38:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_14>
      3c:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_15>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	71 02       	muls	r23, r17
      56:	78 02       	muls	r23, r24
      58:	7f 02       	muls	r23, r31
      5a:	86 02       	muls	r24, r22
      5c:	8d 02       	muls	r24, r29
      5e:	94 02       	muls	r25, r20
      60:	9b 02       	muls	r25, r27

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ee e8       	ldi	r30, 0x8E	; 142
      76:	f1 e1       	ldi	r31, 0x11	; 17
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a0 3a       	cpi	r26, 0xA0	; 160
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	21 e0       	ldi	r18, 0x01	; 1
      86:	a0 ea       	ldi	r26, 0xA0	; 160
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	aa 31       	cpi	r26, 0x1A	; 26
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
      98:	0c 94 c5 08 	jmp	0x118a	; 0x118a <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <LED0>:
uint8 alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
/*sizeof(alphabet)/sizeof(uint8)*/
/*uint8 alphabet[27];*/
void LED0(void)
{
	DIO_Toggle(GPIOB, PIN0);
      a0:	61 e0       	ldi	r22, 0x01	; 1
      a2:	81 e0       	ldi	r24, 0x01	; 1
      a4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_Toggle>
      a8:	08 95       	ret

000000aa <LED1>:
}
void LED1(void)
{
	DIO_Toggle(GPIOB, PIN1);
      aa:	62 e0       	ldi	r22, 0x02	; 2
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_Toggle>
      b2:	08 95       	ret

000000b4 <main>:
{
	DIO_Toggle(GPIOB, PIN7);
}

int main(void)
{
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
      b8:	00 d0       	rcall	.+0      	; 0xba <main+0x6>
      ba:	1f 92       	push	r1
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
	
	BCM_Init();
      c0:	0e 94 01 06 	call	0xc02	; 0xc02 <BCM_Init>
	BCM_Send(BCM_UART, sizeof(alphabet)/sizeof(uint8), alphabet);
      c4:	40 e6       	ldi	r20, 0x60	; 96
      c6:	50 e0       	ldi	r21, 0x00	; 0
      c8:	6b e1       	ldi	r22, 0x1B	; 27
      ca:	70 e0       	ldi	r23, 0x00	; 0
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	0e 94 3f 06 	call	0xc7e	; 0xc7e <BCM_Send>
	BCM_Send(BCM_UART, 27, alphabet);
      d2:	40 e6       	ldi	r20, 0x60	; 96
      d4:	50 e0       	ldi	r21, 0x00	; 0
      d6:	6b e1       	ldi	r22, 0x1B	; 27
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <BCM_Send>
	DIO_Cfg_s DIO_Info = {GPIOB, FULL_PORT, OUTPUT};
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	8f ef       	ldi	r24, 0xFF	; 255
      e6:	8a 83       	std	Y+2, r24	; 0x02
      e8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_init(&DIO_Info);
      ea:	ce 01       	movw	r24, r28
      ec:	01 96       	adiw	r24, 0x01	; 1
      ee:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_init>
	DIO_Write(GPIOB, FULL_PORT, LOW);
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	6f ef       	ldi	r22, 0xFF	; 255
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	0e 94 2c 01 	call	0x258	; 0x258 <DIO_Write>
	TMU_Init();
      fc:	0e 94 b3 07 	call	0xf66	; 0xf66 <TMU_Init>
	TMU_Start(LED0, 5, PERIODIC);
     100:	41 e0       	ldi	r20, 0x01	; 1
     102:	65 e0       	ldi	r22, 0x05	; 5
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	80 e5       	ldi	r24, 0x50	; 80
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 fe 07 	call	0xffc	; 0xffc <TMU_Start>
	TMU_Start(LED1, 10, PERIODIC);
     10e:	41 e0       	ldi	r20, 0x01	; 1
     110:	6a e0       	ldi	r22, 0x0A	; 10
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	85 e5       	ldi	r24, 0x55	; 85
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 fe 07 	call	0xffc	; 0xffc <TMU_Start>
	CPUSleep_Init();
     11c:	0e 94 b3 00 	call	0x166	; 0x166 <CPUSleep_Init>
	CPUSleep_setMode(CPUSLEEP_IDLE_MODE);
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	0e 94 be 00 	call	0x17c	; 0x17c <CPUSleep_setMode>
	sei();
     126:	78 94       	sei

    while(1)
    {
		
        //TODO:: Please write your application code 
		DIO_Toggle(GPIOB, PIN3);
     128:	68 e0       	ldi	r22, 0x08	; 8
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_Toggle>
		BCM_TxDispatcher();
     130:	0e 94 98 06 	call	0xd30	; 0xd30 <BCM_TxDispatcher>
		DIO_Toggle(GPIOB, PIN3);
     134:	68 e0       	ldi	r22, 0x08	; 8
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_Toggle>
		DIO_Toggle(GPIOB, PIN4);
     13c:	60 e1       	ldi	r22, 0x10	; 16
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_Toggle>
		TMU_Dispatcher();
     144:	0e 94 2c 08 	call	0x1058	; 0x1058 <TMU_Dispatcher>
		DIO_Toggle(GPIOB, PIN4);
     148:	60 e1       	ldi	r22, 0x10	; 16
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_Toggle>
		DIO_Toggle(GPIOB, PIN5);
     150:	60 e2       	ldi	r22, 0x20	; 32
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_Toggle>
		CPUSleep_enable();
     158:	0e 94 b8 00 	call	0x170	; 0x170 <CPUSleep_enable>
		DIO_Toggle(GPIOB, PIN5);
     15c:	60 e2       	ldi	r22, 0x20	; 32
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_Toggle>
     164:	e1 cf       	rjmp	.-62     	; 0x128 <main+0x74>

00000166 <CPUSleep_Init>:
 * 							
 */
ERROR_STATUS 
CPUSleep_Init(void)
{
	CPUSleep_status = CPUSLEEP_INIT;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 a1 00 	sts	0x00A1, r24
	return E_OK;
}
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	08 95       	ret

00000170 <CPUSleep_enable>:
 * 							
 */
ERROR_STATUS 
CPUSleep_enable(void)
{
	MCUCR |= SE;
     170:	85 b7       	in	r24, 0x35	; 53
     172:	80 68       	ori	r24, 0x80	; 128
     174:	85 bf       	out	0x35, r24	; 53
	asm("SLEEP");
     176:	88 95       	sleep
	return E_OK;
}
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	08 95       	ret

0000017c <CPUSleep_setMode>:
 * 							
 */
ERROR_STATUS 
CPUSleep_setMode(uint8 mode)
{
	gu8_CPUSleep_mode = mode;
     17c:	80 93 a0 00 	sts	0x00A0, r24
	MCUCR &= 0x0F;
     180:	85 b7       	in	r24, 0x35	; 53
     182:	8f 70       	andi	r24, 0x0F	; 15
     184:	85 bf       	out	0x35, r24	; 53
	MCUCR |= gu8_CPUSleep_mode;
     186:	95 b7       	in	r25, 0x35	; 53
     188:	80 91 a0 00 	lds	r24, 0x00A0
     18c:	89 2b       	or	r24, r25
     18e:	85 bf       	out	0x35, r24	; 53
	return E_OK;
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	08 95       	ret

00000194 <DIO_init>:
* 			  or even one pin.
*/
ERROR_STATUS 
DIO_init (DIO_Cfg_s *DIO_info)
{
	if (!(DIO_info == NULL))
     194:	00 97       	sbiw	r24, 0x00	; 0
     196:	09 f4       	brne	.+2      	; 0x19a <DIO_init+0x6>
     198:	57 c0       	rjmp	.+174    	; 0x248 <DIO_init+0xb4>
	{
		switch(DIO_info->dir)
     19a:	fc 01       	movw	r30, r24
     19c:	22 81       	ldd	r18, Z+2	; 0x02
     19e:	22 23       	and	r18, r18
     1a0:	19 f0       	breq	.+6      	; 0x1a8 <DIO_init+0x14>
     1a2:	2f 3f       	cpi	r18, 0xFF	; 255
     1a4:	59 f1       	breq	.+86     	; 0x1fc <DIO_init+0x68>
     1a6:	52 c0       	rjmp	.+164    	; 0x24c <DIO_init+0xb8>
		{
			case INPUT:
			switch (DIO_info->GPIO)
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 81       	ld	r18, Z
     1ac:	21 30       	cpi	r18, 0x01	; 1
     1ae:	71 f0       	breq	.+28     	; 0x1cc <DIO_init+0x38>
     1b0:	28 f0       	brcs	.+10     	; 0x1bc <DIO_init+0x28>
     1b2:	22 30       	cpi	r18, 0x02	; 2
     1b4:	99 f0       	breq	.+38     	; 0x1dc <DIO_init+0x48>
     1b6:	23 30       	cpi	r18, 0x03	; 3
     1b8:	c9 f0       	breq	.+50     	; 0x1ec <DIO_init+0x58>
     1ba:	4a c0       	rjmp	.+148    	; 0x250 <DIO_init+0xbc>
			{
				case GPIOA:
				PORTA_DIR &= ~DIO_info->pins;
     1bc:	2a b3       	in	r18, 0x1a	; 26
     1be:	fc 01       	movw	r30, r24
     1c0:	81 81       	ldd	r24, Z+1	; 0x01
     1c2:	80 95       	com	r24
     1c4:	82 23       	and	r24, r18
     1c6:	8a bb       	out	0x1a, r24	; 26
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     1c8:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			switch (DIO_info->GPIO)
			{
				case GPIOA:
				PORTA_DIR &= ~DIO_info->pins;
				break;
     1ca:	08 95       	ret
				case GPIOB:
				PORTB_DIR &= ~DIO_info->pins;
     1cc:	27 b3       	in	r18, 0x17	; 23
     1ce:	fc 01       	movw	r30, r24
     1d0:	81 81       	ldd	r24, Z+1	; 0x01
     1d2:	80 95       	com	r24
     1d4:	82 23       	and	r24, r18
     1d6:	87 bb       	out	0x17, r24	; 23
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOA:
				PORTA_DIR &= ~DIO_info->pins;
				break;
				case GPIOB:
				PORTB_DIR &= ~DIO_info->pins;
				break;
     1da:	08 95       	ret
				case GPIOC:
				PORTC_DIR &= ~DIO_info->pins;
     1dc:	24 b3       	in	r18, 0x14	; 20
     1de:	fc 01       	movw	r30, r24
     1e0:	81 81       	ldd	r24, Z+1	; 0x01
     1e2:	80 95       	com	r24
     1e4:	82 23       	and	r24, r18
     1e6:	84 bb       	out	0x14, r24	; 20
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     1e8:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOB:
				PORTB_DIR &= ~DIO_info->pins;
				break;
				case GPIOC:
				PORTC_DIR &= ~DIO_info->pins;
				break;
     1ea:	08 95       	ret
				case GPIOD:
				PORTD_DIR &= ~DIO_info->pins;
     1ec:	21 b3       	in	r18, 0x11	; 17
     1ee:	fc 01       	movw	r30, r24
     1f0:	81 81       	ldd	r24, Z+1	; 0x01
     1f2:	80 95       	com	r24
     1f4:	82 23       	and	r24, r18
     1f6:	81 bb       	out	0x11, r24	; 17
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     1f8:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOC:
				PORTC_DIR &= ~DIO_info->pins;
				break;
				case GPIOD:
				PORTD_DIR &= ~DIO_info->pins;
				break;
     1fa:	08 95       	ret
				default:
				return E_NOK;
			}
			break;
			case OUTPUT:
			switch (DIO_info->GPIO)
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 81       	ld	r18, Z
     200:	21 30       	cpi	r18, 0x01	; 1
     202:	69 f0       	breq	.+26     	; 0x21e <DIO_init+0x8a>
     204:	28 f0       	brcs	.+10     	; 0x210 <DIO_init+0x7c>
     206:	22 30       	cpi	r18, 0x02	; 2
     208:	89 f0       	breq	.+34     	; 0x22c <DIO_init+0x98>
     20a:	23 30       	cpi	r18, 0x03	; 3
     20c:	b1 f0       	breq	.+44     	; 0x23a <DIO_init+0xa6>
     20e:	22 c0       	rjmp	.+68     	; 0x254 <DIO_init+0xc0>
			{
				case GPIOA:
				PORTA_DIR |= DIO_info->pins;
     210:	2a b3       	in	r18, 0x1a	; 26
     212:	fc 01       	movw	r30, r24
     214:	81 81       	ldd	r24, Z+1	; 0x01
     216:	82 2b       	or	r24, r18
     218:	8a bb       	out	0x1a, r24	; 26
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     21a:	80 e0       	ldi	r24, 0x00	; 0
			case OUTPUT:
			switch (DIO_info->GPIO)
			{
				case GPIOA:
				PORTA_DIR |= DIO_info->pins;
				break;
     21c:	08 95       	ret
				case GPIOB:
				PORTB_DIR |= DIO_info->pins;
     21e:	27 b3       	in	r18, 0x17	; 23
     220:	fc 01       	movw	r30, r24
     222:	81 81       	ldd	r24, Z+1	; 0x01
     224:	82 2b       	or	r24, r18
     226:	87 bb       	out	0x17, r24	; 23
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     228:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOA:
				PORTA_DIR |= DIO_info->pins;
				break;
				case GPIOB:
				PORTB_DIR |= DIO_info->pins;
				break;
     22a:	08 95       	ret
				case GPIOC:
				PORTC_DIR |= DIO_info->pins;
     22c:	24 b3       	in	r18, 0x14	; 20
     22e:	fc 01       	movw	r30, r24
     230:	81 81       	ldd	r24, Z+1	; 0x01
     232:	82 2b       	or	r24, r18
     234:	84 bb       	out	0x14, r24	; 20
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     236:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOB:
				PORTB_DIR |= DIO_info->pins;
				break;
				case GPIOC:
				PORTC_DIR |= DIO_info->pins;
				break;
     238:	08 95       	ret
				case GPIOD:
				PORTD_DIR |= DIO_info->pins;
     23a:	21 b3       	in	r18, 0x11	; 17
     23c:	fc 01       	movw	r30, r24
     23e:	81 81       	ldd	r24, Z+1	; 0x01
     240:	82 2b       	or	r24, r18
     242:	81 bb       	out	0x11, r24	; 17
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     244:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOC:
				PORTC_DIR |= DIO_info->pins;
				break;
				case GPIOD:
				PORTD_DIR |= DIO_info->pins;
				break;
     246:	08 95       	ret
			return E_NOK;
		}
	}
	else
	{
		return E_NOK;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	08 95       	ret
				default:
				return E_NOK;
			}
			break;
			default:
			return E_NOK;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	08 95       	ret
				break;
				case GPIOD:
				PORTD_DIR &= ~DIO_info->pins;
				break;
				default:
				return E_NOK;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	08 95       	ret
				break;
				case GPIOD:
				PORTD_DIR |= DIO_info->pins;
				break;
				default:
				return E_NOK;
     254:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		return E_NOK;
	}
	return E_OK;
}
     256:	08 95       	ret

00000258 <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS 
DIO_Write (uint8 GPIO, uint8 pins, uint8 value)
{
	switch(value)
     258:	44 23       	and	r20, r20
     25a:	19 f0       	breq	.+6      	; 0x262 <DIO_Write+0xa>
     25c:	4f 3f       	cpi	r20, 0xFF	; 255
     25e:	09 f1       	breq	.+66     	; 0x2a2 <DIO_Write+0x4a>
     260:	3c c0       	rjmp	.+120    	; 0x2da <DIO_Write+0x82>
	{
		case LOW:
		switch (GPIO)
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	61 f0       	breq	.+24     	; 0x27e <DIO_Write+0x26>
     266:	28 f0       	brcs	.+10     	; 0x272 <DIO_Write+0x1a>
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	79 f0       	breq	.+30     	; 0x28a <DIO_Write+0x32>
     26c:	83 30       	cpi	r24, 0x03	; 3
     26e:	99 f0       	breq	.+38     	; 0x296 <DIO_Write+0x3e>
     270:	36 c0       	rjmp	.+108    	; 0x2de <DIO_Write+0x86>
		{
			case GPIOA:
			PORTA_DATA &= ~pins;
     272:	8b b3       	in	r24, 0x1b	; 27
     274:	60 95       	com	r22
     276:	68 23       	and	r22, r24
     278:	6b bb       	out	0x1b, r22	; 27
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     27a:	80 e0       	ldi	r24, 0x00	; 0
		case LOW:
		switch (GPIO)
		{
			case GPIOA:
			PORTA_DATA &= ~pins;
			break;
     27c:	08 95       	ret
			case GPIOB:
			PORTB_DATA &= ~pins;
     27e:	88 b3       	in	r24, 0x18	; 24
     280:	60 95       	com	r22
     282:	68 23       	and	r22, r24
     284:	68 bb       	out	0x18, r22	; 24
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     286:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOA:
			PORTA_DATA &= ~pins;
			break;
			case GPIOB:
			PORTB_DATA &= ~pins;
			break;
     288:	08 95       	ret
			case GPIOC:
			PORTC_DATA &= ~pins;
     28a:	85 b3       	in	r24, 0x15	; 21
     28c:	60 95       	com	r22
     28e:	68 23       	and	r22, r24
     290:	65 bb       	out	0x15, r22	; 21
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     292:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOB:
			PORTB_DATA &= ~pins;
			break;
			case GPIOC:
			PORTC_DATA &= ~pins;
			break;
     294:	08 95       	ret
			case GPIOD:
			PORTD_DATA &= ~pins;
     296:	82 b3       	in	r24, 0x12	; 18
     298:	60 95       	com	r22
     29a:	68 23       	and	r22, r24
     29c:	62 bb       	out	0x12, r22	; 18
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     29e:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOC:
			PORTC_DATA &= ~pins;
			break;
			case GPIOD:
			PORTD_DATA &= ~pins;
			break;
     2a0:	08 95       	ret
			default:
			return E_NOK;
		}
		break;
		case HIGH:
		switch (GPIO)
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	59 f0       	breq	.+22     	; 0x2bc <DIO_Write+0x64>
     2a6:	28 f0       	brcs	.+10     	; 0x2b2 <DIO_Write+0x5a>
     2a8:	82 30       	cpi	r24, 0x02	; 2
     2aa:	69 f0       	breq	.+26     	; 0x2c6 <DIO_Write+0x6e>
     2ac:	83 30       	cpi	r24, 0x03	; 3
     2ae:	81 f0       	breq	.+32     	; 0x2d0 <DIO_Write+0x78>
     2b0:	18 c0       	rjmp	.+48     	; 0x2e2 <DIO_Write+0x8a>
		{
			case GPIOA:
			PORTA_DATA |= pins;
     2b2:	8b b3       	in	r24, 0x1b	; 27
     2b4:	68 2b       	or	r22, r24
     2b6:	6b bb       	out	0x1b, r22	; 27
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
		case HIGH:
		switch (GPIO)
		{
			case GPIOA:
			PORTA_DATA |= pins;
			break;
     2ba:	08 95       	ret
			case GPIOB:
			PORTB_DATA |= pins;
     2bc:	88 b3       	in	r24, 0x18	; 24
     2be:	68 2b       	or	r22, r24
     2c0:	68 bb       	out	0x18, r22	; 24
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     2c2:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOA:
			PORTA_DATA |= pins;
			break;
			case GPIOB:
			PORTB_DATA |= pins;
			break;
     2c4:	08 95       	ret
			case GPIOC:
			PORTC_DATA |= pins;
     2c6:	85 b3       	in	r24, 0x15	; 21
     2c8:	68 2b       	or	r22, r24
     2ca:	65 bb       	out	0x15, r22	; 21
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     2cc:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOB:
			PORTB_DATA |= pins;
			break;
			case GPIOC:
			PORTC_DATA |= pins;
			break;
     2ce:	08 95       	ret
			case GPIOD:
			PORTD_DATA |= pins;
     2d0:	82 b3       	in	r24, 0x12	; 18
     2d2:	68 2b       	or	r22, r24
     2d4:	62 bb       	out	0x12, r22	; 18
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     2d6:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOC:
			PORTC_DATA |= pins;
			break;
			case GPIOD:
			PORTD_DATA |= pins;
			break;
     2d8:	08 95       	ret
			default:
			return E_NOK;
		}
		break;
		default:
		return E_NOK;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	08 95       	ret
			break;
			case GPIOD:
			PORTD_DATA &= ~pins;
			break;
			default:
			return E_NOK;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	08 95       	ret
			break;
			case GPIOD:
			PORTD_DATA |= pins;
			break;
			default:
			return E_NOK;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		return E_NOK;
	}
	return E_OK;
}
     2e4:	08 95       	ret

000002e6 <DIO_Toggle>:
* 			  or even one pin.
*/
ERROR_STATUS 
DIO_Toggle (uint8 GPIO, uint8 pins)
{
	switch (GPIO)
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	59 f0       	breq	.+22     	; 0x300 <DIO_Toggle+0x1a>
     2ea:	28 f0       	brcs	.+10     	; 0x2f6 <DIO_Toggle+0x10>
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	69 f0       	breq	.+26     	; 0x30a <DIO_Toggle+0x24>
     2f0:	83 30       	cpi	r24, 0x03	; 3
     2f2:	81 f0       	breq	.+32     	; 0x314 <DIO_Toggle+0x2e>
     2f4:	14 c0       	rjmp	.+40     	; 0x31e <DIO_Toggle+0x38>
	{
		case GPIOA:
		PORTA_DATA ^= pins;
     2f6:	8b b3       	in	r24, 0x1b	; 27
     2f8:	68 27       	eor	r22, r24
     2fa:	6b bb       	out	0x1b, r22	; 27
		PORTD_DATA ^= pins;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     2fc:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (GPIO)
	{
		case GPIOA:
		PORTA_DATA ^= pins;
		break;
     2fe:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^= pins;
     300:	88 b3       	in	r24, 0x18	; 24
     302:	68 27       	eor	r22, r24
     304:	68 bb       	out	0x18, r22	; 24
		PORTD_DATA ^= pins;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     306:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOA:
		PORTA_DATA ^= pins;
		break;
		case GPIOB:
		PORTB_DATA ^= pins;
		break;
     308:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^= pins;
     30a:	85 b3       	in	r24, 0x15	; 21
     30c:	68 27       	eor	r22, r24
     30e:	65 bb       	out	0x15, r22	; 21
		PORTD_DATA ^= pins;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     310:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOB:
		PORTB_DATA ^= pins;
		break;
		case GPIOC:
		PORTC_DATA ^= pins;
		break;
     312:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^= pins;
     314:	82 b3       	in	r24, 0x12	; 18
     316:	68 27       	eor	r22, r24
     318:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     31a:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOC:
		PORTC_DATA ^= pins;
		break;
		case GPIOD:
		PORTD_DATA ^= pins;
		break;
     31c:	08 95       	ret
		default:
		return E_NOK;
     31e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return E_OK;
     320:	08 95       	ret

00000322 <Timer_Init>:
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS 
Timer_Init(Timer_cfg_s* Timer_cfg)
{
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	ec 01       	movw	r28, r24
	switch(Timer_cfg->Timer_CH_NO)
     328:	88 81       	ld	r24, Y
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	09 f4       	brne	.+2      	; 0x330 <Timer_Init+0xe>
     32e:	60 c0       	rjmp	.+192    	; 0x3f0 <Timer_Init+0xce>
     330:	20 f0       	brcs	.+8      	; 0x33a <Timer_Init+0x18>
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	09 f4       	brne	.+2      	; 0x338 <Timer_Init+0x16>
     336:	b8 c0       	rjmp	.+368    	; 0x4a8 <Timer_Init+0x186>
     338:	0f c1       	rjmp	.+542    	; 0x558 <Timer_Init+0x236>
	{  
		case (TIMER_CH0) :
		if (NULL != Timer_cfg->Timer_Cbk_ptr)
     33a:	8c 81       	ldd	r24, Y+4	; 0x04
     33c:	9d 81       	ldd	r25, Y+5	; 0x05
     33e:	00 97       	sbiw	r24, 0x00	; 0
     340:	21 f0       	breq	.+8      	; 0x34a <Timer_Init+0x28>
		{
			TIMER_OVF_CBK_PTR[TIMER_CH0] = Timer_cfg->Timer_Cbk_ptr;
     342:	90 93 a3 00 	sts	0x00A3, r25
     346:	80 93 a2 00 	sts	0x00A2, r24
		}
		else
		{
			
		}
		switch(Timer_cfg->Timer_Mode)
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	b1 f1       	breq	.+108    	; 0x3bc <Timer_Init+0x9a>
     350:	18 f0       	brcs	.+6      	; 0x358 <Timer_Init+0x36>
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	d1 f1       	breq	.+116    	; 0x3ca <Timer_Init+0xa8>
     356:	00 c1       	rjmp	.+512    	; 0x558 <Timer_Init+0x236>
		{
			case(TIMER_MODE):
			TCCR0 = ZERO_INITIALIZATION;
     358:	13 be       	out	0x33, r1	; 51
			switch(Timer_cfg->Timer_Prescaler)
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	84 30       	cpi	r24, 0x04	; 4
     35e:	c9 f0       	breq	.+50     	; 0x392 <Timer_Init+0x70>
     360:	28 f4       	brcc	.+10     	; 0x36c <Timer_Init+0x4a>
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	41 f0       	breq	.+16     	; 0x376 <Timer_Init+0x54>
     366:	82 30       	cpi	r24, 0x02	; 2
     368:	69 f0       	breq	.+26     	; 0x384 <Timer_Init+0x62>
     36a:	f6 c0       	rjmp	.+492    	; 0x558 <Timer_Init+0x236>
     36c:	86 30       	cpi	r24, 0x06	; 6
     36e:	c1 f0       	breq	.+48     	; 0x3a0 <Timer_Init+0x7e>
     370:	87 30       	cpi	r24, 0x07	; 7
     372:	e9 f0       	breq	.+58     	; 0x3ae <Timer_Init+0x8c>
     374:	f1 c0       	rjmp	.+482    	; 0x558 <Timer_Init+0x236>
			{
				case(TIMER_PRESCALER_NO) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_ONE;
     376:	a8 81       	ld	r26, Y
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	a5 55       	subi	r26, 0x55	; 85
     37c:	bf 4f       	sbci	r27, 0xFF	; 255
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	8c 93       	st	X, r24
				break;
     382:	29 c0       	rjmp	.+82     	; 0x3d6 <Timer_Init+0xb4>
				case(TIMER_PRESCALER_8) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_TWO;
     384:	a8 81       	ld	r26, Y
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	a5 55       	subi	r26, 0x55	; 85
     38a:	bf 4f       	sbci	r27, 0xFF	; 255
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	8c 93       	st	X, r24
				break;
     390:	22 c0       	rjmp	.+68     	; 0x3d6 <Timer_Init+0xb4>
				case(TIMER_PRESCALER_64) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_THREE;
     392:	a8 81       	ld	r26, Y
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	a5 55       	subi	r26, 0x55	; 85
     398:	bf 4f       	sbci	r27, 0xFF	; 255
     39a:	83 e0       	ldi	r24, 0x03	; 3
     39c:	8c 93       	st	X, r24
				break;
     39e:	1b c0       	rjmp	.+54     	; 0x3d6 <Timer_Init+0xb4>
				case(TIMER_PRESCALER_256) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FOUR;
     3a0:	a8 81       	ld	r26, Y
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	a5 55       	subi	r26, 0x55	; 85
     3a6:	bf 4f       	sbci	r27, 0xFF	; 255
     3a8:	84 e0       	ldi	r24, 0x04	; 4
     3aa:	8c 93       	st	X, r24
				break;
     3ac:	14 c0       	rjmp	.+40     	; 0x3d6 <Timer_Init+0xb4>
				case(TIMER_PRESCALER_1024) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FIVE;
     3ae:	a8 81       	ld	r26, Y
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	a5 55       	subi	r26, 0x55	; 85
     3b4:	bf 4f       	sbci	r27, 0xFF	; 255
     3b6:	85 e0       	ldi	r24, 0x05	; 5
     3b8:	8c 93       	st	X, r24
				break;
     3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <Timer_Init+0xb4>
				default :
				return E_NOK;
			}
			break;
			case (COUNTER_RISING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SEVEN;
     3bc:	a8 81       	ld	r26, Y
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	a5 55       	subi	r26, 0x55	; 85
     3c2:	bf 4f       	sbci	r27, 0xFF	; 255
     3c4:	87 e0       	ldi	r24, 0x07	; 7
     3c6:	8c 93       	st	X, r24
			break;
     3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <Timer_Init+0xb4>
			
			case (COUNTER_FALLING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SIX;
     3ca:	a8 81       	ld	r26, Y
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	a5 55       	subi	r26, 0x55	; 85
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	86 e0       	ldi	r24, 0x06	; 6
     3d4:	8c 93       	st	X, r24
			break;
			
			default :
			return E_NOK;
		}
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	88 23       	and	r24, r24
     3da:	39 f0       	breq	.+14     	; 0x3ea <Timer_Init+0xc8>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	09 f0       	breq	.+2      	; 0x3e2 <Timer_Init+0xc0>
     3e0:	bb c0       	rjmp	.+374    	; 0x558 <Timer_Init+0x236>
		{
			case(TIMER_INTERRUPT_MODE):
			TIMSK |= SHIFT_ONE;
     3e2:	89 b7       	in	r24, 0x39	; 57
     3e4:	81 60       	ori	r24, 0x01	; 1
     3e6:	89 bf       	out	0x39, r24	; 57
			break;
     3e8:	b7 c0       	rjmp	.+366    	; 0x558 <Timer_Init+0x236>
			case(TIMER_POLLING_MODE):
			TIMSK |= ZERO_INITIALIZATION;
     3ea:	89 b7       	in	r24, 0x39	; 57
     3ec:	89 bf       	out	0x39, r24	; 57
			break;
     3ee:	b4 c0       	rjmp	.+360    	; 0x558 <Timer_Init+0x236>
			default :
			return E_NOK;
		}
		break;
		case (TIMER_CH1) :
		if (NULL != Timer_cfg->Timer_Cbk_ptr)
     3f0:	8c 81       	ldd	r24, Y+4	; 0x04
     3f2:	9d 81       	ldd	r25, Y+5	; 0x05
     3f4:	00 97       	sbiw	r24, 0x00	; 0
     3f6:	21 f0       	breq	.+8      	; 0x400 <Timer_Init+0xde>
		{
			TIMER_OVF_CBK_PTR[TIMER_CH1] = Timer_cfg->Timer_Cbk_ptr;
     3f8:	90 93 a5 00 	sts	0x00A5, r25
     3fc:	80 93 a4 00 	sts	0x00A4, r24
		}
		else
		{
			
		}
		switch(Timer_cfg->Timer_Mode)
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	b9 f1       	breq	.+110    	; 0x474 <Timer_Init+0x152>
     406:	18 f0       	brcs	.+6      	; 0x40e <Timer_Init+0xec>
     408:	82 30       	cpi	r24, 0x02	; 2
     40a:	d9 f1       	breq	.+118    	; 0x482 <Timer_Init+0x160>
     40c:	a5 c0       	rjmp	.+330    	; 0x558 <Timer_Init+0x236>
		{
			case(TIMER_MODE):
			TCCR1 = ZERO_INITIALIZATION;
     40e:	1f bc       	out	0x2f, r1	; 47
     410:	1e bc       	out	0x2e, r1	; 46
			switch(Timer_cfg->Timer_Prescaler)
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	84 30       	cpi	r24, 0x04	; 4
     416:	c9 f0       	breq	.+50     	; 0x44a <Timer_Init+0x128>
     418:	28 f4       	brcc	.+10     	; 0x424 <Timer_Init+0x102>
     41a:	81 30       	cpi	r24, 0x01	; 1
     41c:	41 f0       	breq	.+16     	; 0x42e <Timer_Init+0x10c>
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	69 f0       	breq	.+26     	; 0x43c <Timer_Init+0x11a>
     422:	9a c0       	rjmp	.+308    	; 0x558 <Timer_Init+0x236>
     424:	86 30       	cpi	r24, 0x06	; 6
     426:	c1 f0       	breq	.+48     	; 0x458 <Timer_Init+0x136>
     428:	87 30       	cpi	r24, 0x07	; 7
     42a:	e9 f0       	breq	.+58     	; 0x466 <Timer_Init+0x144>
     42c:	95 c0       	rjmp	.+298    	; 0x558 <Timer_Init+0x236>
			{
				case(TIMER_PRESCALER_NO) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_ONE;
     42e:	a8 81       	ld	r26, Y
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	a5 55       	subi	r26, 0x55	; 85
     434:	bf 4f       	sbci	r27, 0xFF	; 255
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	8c 93       	st	X, r24
				break;
     43a:	29 c0       	rjmp	.+82     	; 0x48e <Timer_Init+0x16c>
				case(TIMER_PRESCALER_8) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_TWO;
     43c:	a8 81       	ld	r26, Y
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	a5 55       	subi	r26, 0x55	; 85
     442:	bf 4f       	sbci	r27, 0xFF	; 255
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	8c 93       	st	X, r24
				break;
     448:	22 c0       	rjmp	.+68     	; 0x48e <Timer_Init+0x16c>
				case(TIMER_PRESCALER_64) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_THREE;
     44a:	a8 81       	ld	r26, Y
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	a5 55       	subi	r26, 0x55	; 85
     450:	bf 4f       	sbci	r27, 0xFF	; 255
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	8c 93       	st	X, r24
				break;
     456:	1b c0       	rjmp	.+54     	; 0x48e <Timer_Init+0x16c>
				case(TIMER_PRESCALER_256) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FOUR;
     458:	a8 81       	ld	r26, Y
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	a5 55       	subi	r26, 0x55	; 85
     45e:	bf 4f       	sbci	r27, 0xFF	; 255
     460:	84 e0       	ldi	r24, 0x04	; 4
     462:	8c 93       	st	X, r24
				break;
     464:	14 c0       	rjmp	.+40     	; 0x48e <Timer_Init+0x16c>
				case(TIMER_PRESCALER_1024) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FIVE;
     466:	a8 81       	ld	r26, Y
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	a5 55       	subi	r26, 0x55	; 85
     46c:	bf 4f       	sbci	r27, 0xFF	; 255
     46e:	85 e0       	ldi	r24, 0x05	; 5
     470:	8c 93       	st	X, r24
				break;
     472:	0d c0       	rjmp	.+26     	; 0x48e <Timer_Init+0x16c>
				return E_NOK;
			}
			break;
			
			case (COUNTER_RISING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SEVEN;
     474:	a8 81       	ld	r26, Y
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	a5 55       	subi	r26, 0x55	; 85
     47a:	bf 4f       	sbci	r27, 0xFF	; 255
     47c:	87 e0       	ldi	r24, 0x07	; 7
     47e:	8c 93       	st	X, r24
			break;
     480:	06 c0       	rjmp	.+12     	; 0x48e <Timer_Init+0x16c>
			
			case (COUNTER_FALLING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SIX;
     482:	a8 81       	ld	r26, Y
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	a5 55       	subi	r26, 0x55	; 85
     488:	bf 4f       	sbci	r27, 0xFF	; 255
     48a:	86 e0       	ldi	r24, 0x06	; 6
     48c:	8c 93       	st	X, r24
			break;
			
			default :
			return E_NOK;
		}
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
     48e:	8a 81       	ldd	r24, Y+2	; 0x02
     490:	88 23       	and	r24, r24
     492:	39 f0       	breq	.+14     	; 0x4a2 <Timer_Init+0x180>
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	09 f0       	breq	.+2      	; 0x49a <Timer_Init+0x178>
     498:	5f c0       	rjmp	.+190    	; 0x558 <Timer_Init+0x236>
		{
			case(TIMER_INTERRUPT_MODE ) :
			TIMSK |= SHIFT_FOUR;
     49a:	89 b7       	in	r24, 0x39	; 57
     49c:	84 60       	ori	r24, 0x04	; 4
     49e:	89 bf       	out	0x39, r24	; 57
			break;
     4a0:	5b c0       	rjmp	.+182    	; 0x558 <Timer_Init+0x236>
			case(TIMER_POLLING_MODE):
			TIMSK |= ZERO_INITIALIZATION;
     4a2:	89 b7       	in	r24, 0x39	; 57
     4a4:	89 bf       	out	0x39, r24	; 57
			break;
     4a6:	58 c0       	rjmp	.+176    	; 0x558 <Timer_Init+0x236>
			default :
			return E_NOK;
		}
		break;
		case (TIMER_CH2) :
		if (NULL != Timer_cfg->Timer_Cbk_ptr)
     4a8:	8c 81       	ldd	r24, Y+4	; 0x04
     4aa:	9d 81       	ldd	r25, Y+5	; 0x05
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	21 f0       	breq	.+8      	; 0x4b8 <Timer_Init+0x196>
		{
			TIMER_OVF_CBK_PTR[TIMER_CH2] = Timer_cfg->Timer_Cbk_ptr;
     4b0:	90 93 a7 00 	sts	0x00A7, r25
     4b4:	80 93 a6 00 	sts	0x00A6, r24
		}
		else
		{
			
		}
		switch(Timer_cfg->Timer_Mode)
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	88 23       	and	r24, r24
     4bc:	21 f0       	breq	.+8      	; 0x4c6 <Timer_Init+0x1a4>
     4be:	83 30       	cpi	r24, 0x03	; 3
     4c0:	08 f0       	brcs	.+2      	; 0x4c4 <Timer_Init+0x1a2>
     4c2:	4a c0       	rjmp	.+148    	; 0x558 <Timer_Init+0x236>
     4c4:	3e c0       	rjmp	.+124    	; 0x542 <Timer_Init+0x220>
		{
			case(TIMER_MODE):
			TCCR2 = ZERO_INITIALIZATION;
     4c6:	15 bc       	out	0x25, r1	; 37
		switch(Timer_cfg->Timer_Prescaler)
     4c8:	4b 81       	ldd	r20, Y+3	; 0x03
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	41 50       	subi	r20, 0x01	; 1
     4ce:	51 09       	sbc	r21, r1
     4d0:	47 30       	cpi	r20, 0x07	; 7
     4d2:	51 05       	cpc	r21, r1
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <Timer_Init+0x1b6>
     4d6:	40 c0       	rjmp	.+128    	; 0x558 <Timer_Init+0x236>
     4d8:	46 5d       	subi	r20, 0xD6	; 214
     4da:	5f 4f       	sbci	r21, 0xFF	; 255
     4dc:	fa 01       	movw	r30, r20
     4de:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__tablejump2__>
		{
			case(TIMER_PRESCALER_NO) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_ONE;
     4e2:	a8 81       	ld	r26, Y
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	a5 55       	subi	r26, 0x55	; 85
     4e8:	bf 4f       	sbci	r27, 0xFF	; 255
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	8c 93       	st	X, r24
			break;
     4ee:	29 c0       	rjmp	.+82     	; 0x542 <Timer_Init+0x220>
			case(TIMER_PRESCALER_8) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_TWO;
     4f0:	a8 81       	ld	r26, Y
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	a5 55       	subi	r26, 0x55	; 85
     4f6:	bf 4f       	sbci	r27, 0xFF	; 255
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	8c 93       	st	X, r24
			break;
     4fc:	22 c0       	rjmp	.+68     	; 0x542 <Timer_Init+0x220>
			case(TIMER_PRESCALER_32) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_THREE;
     4fe:	a8 81       	ld	r26, Y
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	a5 55       	subi	r26, 0x55	; 85
     504:	bf 4f       	sbci	r27, 0xFF	; 255
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	8c 93       	st	X, r24
			break;
     50a:	1b c0       	rjmp	.+54     	; 0x542 <Timer_Init+0x220>
			case(TIMER_PRESCALER_64) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FOUR;
     50c:	a8 81       	ld	r26, Y
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	a5 55       	subi	r26, 0x55	; 85
     512:	bf 4f       	sbci	r27, 0xFF	; 255
     514:	84 e0       	ldi	r24, 0x04	; 4
     516:	8c 93       	st	X, r24
			break;
     518:	14 c0       	rjmp	.+40     	; 0x542 <Timer_Init+0x220>
			case(TIMER_PRESCALER_128) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FIVE;
     51a:	a8 81       	ld	r26, Y
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	a5 55       	subi	r26, 0x55	; 85
     520:	bf 4f       	sbci	r27, 0xFF	; 255
     522:	85 e0       	ldi	r24, 0x05	; 5
     524:	8c 93       	st	X, r24
			break;
     526:	0d c0       	rjmp	.+26     	; 0x542 <Timer_Init+0x220>
			case(TIMER_PRESCALER_256) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SIX;
     528:	a8 81       	ld	r26, Y
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	a5 55       	subi	r26, 0x55	; 85
     52e:	bf 4f       	sbci	r27, 0xFF	; 255
     530:	86 e0       	ldi	r24, 0x06	; 6
     532:	8c 93       	st	X, r24
			break;
     534:	06 c0       	rjmp	.+12     	; 0x542 <Timer_Init+0x220>
			case(TIMER_PRESCALER_1024) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SEVEN;
     536:	a8 81       	ld	r26, Y
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	a5 55       	subi	r26, 0x55	; 85
     53c:	bf 4f       	sbci	r27, 0xFF	; 255
     53e:	87 e0       	ldi	r24, 0x07	; 7
     540:	8c 93       	st	X, r24
			break;
			
			default :
			return E_NOK;
		}
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	88 23       	and	r24, r24
     546:	31 f0       	breq	.+12     	; 0x554 <Timer_Init+0x232>
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	31 f4       	brne	.+12     	; 0x558 <Timer_Init+0x236>
		{
			case(TIMER_INTERRUPT_MODE ) :
			TIMSK |= SHIFT_TIMER_INTERRUPT_MODE;
     54c:	89 b7       	in	r24, 0x39	; 57
     54e:	80 64       	ori	r24, 0x40	; 64
     550:	89 bf       	out	0x39, r24	; 57
			break;
     552:	02 c0       	rjmp	.+4      	; 0x558 <Timer_Init+0x236>
			case(TIMER_POLLING_MODE):
			TIMSK |= SHIFT_ZERO;
     554:	89 b7       	in	r24, 0x39	; 57
     556:	89 bf       	out	0x39, r24	; 57
		default :
		return E_NOK;
		
	}
	return E_NOK;
}
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <Timer_Start>:
 * 							
 */
ERROR_STATUS 
Timer_Start(uint8 Timer_CH_NO, uint16 Timer_Count)
{
	switch (Timer_CH_NO)
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	01 f1       	breq	.+64     	; 0x5a4 <Timer_Start+0x44>
     564:	18 f0       	brcs	.+6      	; 0x56c <Timer_Start+0xc>
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	d1 f1       	breq	.+116    	; 0x5de <Timer_Start+0x7e>
     56a:	4e c0       	rjmp	.+156    	; 0x608 <Timer_Start+0xa8>
	{
		case TIMER_CH0:
		if (Timer_Count > TCNT0_MAX)
     56c:	6f 3f       	cpi	r22, 0xFF	; 255
     56e:	71 05       	cpc	r23, r1
     570:	11 f0       	breq	.+4      	; 0x576 <Timer_Start+0x16>
     572:	08 f0       	brcs	.+2      	; 0x576 <Timer_Start+0x16>
     574:	4b c0       	rjmp	.+150    	; 0x60c <Timer_Start+0xac>
		{
			return E_NOK;
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
     576:	90 91 ab 00 	lds	r25, 0x00AB
     57a:	99 23       	and	r25, r25
     57c:	09 f4       	brne	.+2      	; 0x580 <Timer_Start+0x20>
     57e:	48 c0       	rjmp	.+144    	; 0x610 <Timer_Start+0xb0>
		{
			return E_NOK;
		}
		else if ((gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SEVEN)||(gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SIX))
     580:	96 50       	subi	r25, 0x06	; 6
     582:	92 30       	cpi	r25, 0x02	; 2
     584:	38 f4       	brcc	.+14     	; 0x594 <Timer_Start+0x34>
		{
			TCNT0 = ZERO_INITIALIZATION;
     586:	12 be       	out	0x32, r1	; 50
			TCCR0 |= gu8_TimerPrescaler[Timer_CH_NO];
     588:	23 b7       	in	r18, 0x33	; 51
     58a:	90 91 ab 00 	lds	r25, 0x00AB
     58e:	92 2b       	or	r25, r18
     590:	93 bf       	out	0x33, r25	; 51
     592:	32 c0       	rjmp	.+100    	; 0x5f8 <Timer_Start+0x98>
		}
		else 
		{
			TCNT0 = TCNT0_MAX - Timer_Count;
     594:	60 95       	com	r22
     596:	62 bf       	out	0x32, r22	; 50
			TCCR0 |= gu8_TimerPrescaler[Timer_CH_NO];
     598:	23 b7       	in	r18, 0x33	; 51
     59a:	90 91 ab 00 	lds	r25, 0x00AB
     59e:	92 2b       	or	r25, r18
     5a0:	93 bf       	out	0x33, r25	; 51
     5a2:	2a c0       	rjmp	.+84     	; 0x5f8 <Timer_Start+0x98>
		}
		break;
		
		case TIMER_CH1:
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
     5a4:	90 91 ac 00 	lds	r25, 0x00AC
     5a8:	99 23       	and	r25, r25
     5aa:	a1 f1       	breq	.+104    	; 0x614 <Timer_Start+0xb4>
		{
			return E_NOK;
		}
		else if ((gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SEVEN)||(gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SIX))
     5ac:	96 50       	subi	r25, 0x06	; 6
     5ae:	92 30       	cpi	r25, 0x02	; 2
     5b0:	50 f4       	brcc	.+20     	; 0x5c6 <Timer_Start+0x66>
		{
			TCNT1 = ZERO_INITIALIZATION;
     5b2:	1d bc       	out	0x2d, r1	; 45
     5b4:	1c bc       	out	0x2c, r1	; 44
			TCCR1 |= gu8_TimerPrescaler[Timer_CH_NO];
     5b6:	2e b5       	in	r18, 0x2e	; 46
     5b8:	3f b5       	in	r19, 0x2f	; 47
     5ba:	90 91 ac 00 	lds	r25, 0x00AC
     5be:	29 2b       	or	r18, r25
     5c0:	3f bd       	out	0x2f, r19	; 47
     5c2:	2e bd       	out	0x2e, r18	; 46
     5c4:	19 c0       	rjmp	.+50     	; 0x5f8 <Timer_Start+0x98>
		}
		else 
		{
			TCNT1 = TCNT1_MAX - Timer_Count;
     5c6:	60 95       	com	r22
     5c8:	70 95       	com	r23
     5ca:	7d bd       	out	0x2d, r23	; 45
     5cc:	6c bd       	out	0x2c, r22	; 44
			TCCR1 |= gu8_TimerPrescaler[Timer_CH_NO];
     5ce:	2e b5       	in	r18, 0x2e	; 46
     5d0:	3f b5       	in	r19, 0x2f	; 47
     5d2:	90 91 ac 00 	lds	r25, 0x00AC
     5d6:	29 2b       	or	r18, r25
     5d8:	3f bd       	out	0x2f, r19	; 47
     5da:	2e bd       	out	0x2e, r18	; 46
     5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <Timer_Start+0x98>
		}
		break;
		
		case TIMER_CH2:
		if (Timer_Count > TCNT2_MAX)
     5de:	6f 3f       	cpi	r22, 0xFF	; 255
     5e0:	71 05       	cpc	r23, r1
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <Timer_Start+0x86>
     5e4:	c8 f4       	brcc	.+50     	; 0x618 <Timer_Start+0xb8>
		{
			return E_NOK;
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
     5e6:	90 91 ad 00 	lds	r25, 0x00AD
     5ea:	99 23       	and	r25, r25
     5ec:	b9 f0       	breq	.+46     	; 0x61c <Timer_Start+0xbc>
		{
			return E_NOK;
		}
		else 
		{
			TCNT2 = TCNT2_MAX - Timer_Count;
     5ee:	60 95       	com	r22
     5f0:	64 bd       	out	0x24, r22	; 36
			TCCR2 |= gu8_TimerPrescaler[Timer_CH_NO];
     5f2:	25 b5       	in	r18, 0x25	; 37
     5f4:	92 2b       	or	r25, r18
     5f6:	95 bd       	out	0x25, r25	; 37
		}
		break;
		default:
		return E_NOK;
	}
	gu8_started_state[Timer_CH_NO] = ONE_INITIALIZATION;
     5f8:	e8 2f       	mov	r30, r24
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	e8 55       	subi	r30, 0x58	; 88
     5fe:	ff 4f       	sbci	r31, 0xFF	; 255
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	80 83       	st	Z, r24
	return E_OK;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	08 95       	ret
			TCNT2 = TCNT2_MAX - Timer_Count;
			TCCR2 |= gu8_TimerPrescaler[Timer_CH_NO];
		}
		break;
		default:
		return E_NOK;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	08 95       	ret
	switch (Timer_CH_NO)
	{
		case TIMER_CH0:
		if (Timer_Count > TCNT0_MAX)
		{
			return E_NOK;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
		{
			return E_NOK;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	08 95       	ret
		break;
		
		case TIMER_CH1:
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
		{
			return E_NOK;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	08 95       	ret
		break;
		
		case TIMER_CH2:
		if (Timer_Count > TCNT2_MAX)
		{
			return E_NOK;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	08 95       	ret
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
		{
			return E_NOK;
     61c:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return E_NOK;
	}
	gu8_started_state[Timer_CH_NO] = ONE_INITIALIZATION;
	return E_OK;
}
     61e:	08 95       	ret

00000620 <Timer_Stop>:
 * Description: This function stops the needed timer.
 * 							
 */
ERROR_STATUS 
Timer_Stop(uint8 Timer_CH_NO){
	if (Timer_CH_NO>NO_OF_TIMERS - 1)
     620:	83 30       	cpi	r24, 0x03	; 3
     622:	08 f5       	brcc	.+66     	; 0x666 <Timer_Stop+0x46>
	{
		return E_NOK;
	}
	else
	{
		if (gu8_started_state[Timer_CH_NO] == ONE_INITIALIZATION)
     624:	28 2f       	mov	r18, r24
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	f9 01       	movw	r30, r18
     62a:	e8 55       	subi	r30, 0x58	; 88
     62c:	ff 4f       	sbci	r31, 0xFF	; 255
     62e:	90 81       	ld	r25, Z
     630:	91 30       	cpi	r25, 0x01	; 1
     632:	d9 f4       	brne	.+54     	; 0x66a <Timer_Stop+0x4a>
		{
			switch (Timer_CH_NO)
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	41 f0       	breq	.+16     	; 0x648 <Timer_Stop+0x28>
     638:	18 f0       	brcs	.+6      	; 0x640 <Timer_Stop+0x20>
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	59 f0       	breq	.+22     	; 0x654 <Timer_Stop+0x34>
     63e:	17 c0       	rjmp	.+46     	; 0x66e <Timer_Stop+0x4e>
			{
				case TIMER_CH0:
				TCCR0 &= ~(TIMER_PRESCALER_BITS);
     640:	83 b7       	in	r24, 0x33	; 51
     642:	88 7f       	andi	r24, 0xF8	; 248
     644:	83 bf       	out	0x33, r24	; 51
				break;
     646:	09 c0       	rjmp	.+18     	; 0x65a <Timer_Stop+0x3a>
				case TIMER_CH1:
				TCCR1 &= ~(TIMER_PRESCALER_BITS);
     648:	8e b5       	in	r24, 0x2e	; 46
     64a:	9f b5       	in	r25, 0x2f	; 47
     64c:	88 7f       	andi	r24, 0xF8	; 248
     64e:	9f bd       	out	0x2f, r25	; 47
     650:	8e bd       	out	0x2e, r24	; 46
				break;
     652:	03 c0       	rjmp	.+6      	; 0x65a <Timer_Stop+0x3a>
				case TIMER_CH2:
				TCCR2 &= ~(TIMER_PRESCALER_BITS);
     654:	85 b5       	in	r24, 0x25	; 37
     656:	88 7f       	andi	r24, 0xF8	; 248
     658:	85 bd       	out	0x25, r24	; 37
				break;
				default:
				return E_NOK;
			}
			gu8_started_state[Timer_CH_NO] = ZERO_INITIALIZATION;
     65a:	f9 01       	movw	r30, r18
     65c:	e8 55       	subi	r30, 0x58	; 88
     65e:	ff 4f       	sbci	r31, 0xFF	; 255
     660:	10 82       	st	Z, r1
		}
		else
		{
			return E_NOK;
		}
		return E_OK;	
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	08 95       	ret
 */
ERROR_STATUS 
Timer_Stop(uint8 Timer_CH_NO){
	if (Timer_CH_NO>NO_OF_TIMERS - 1)
	{
		return E_NOK;
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	08 95       	ret
			}
			gu8_started_state[Timer_CH_NO] = ZERO_INITIALIZATION;
		}
		else
		{
			return E_NOK;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	08 95       	ret
				break;
				case TIMER_CH2:
				TCCR2 &= ~(TIMER_PRESCALER_BITS);
				break;
				default:
				return E_NOK;
     66e:	81 e0       	ldi	r24, 0x01	; 1
		{
			return E_NOK;
		}
		return E_OK;	
	}
}
     670:	08 95       	ret

00000672 <__vector_11>:
}



ISR(TIMER0_OVF_vect)
{
     672:	1f 92       	push	r1
     674:	0f 92       	push	r0
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	0f 92       	push	r0
     67a:	11 24       	eor	r1, r1
     67c:	2f 93       	push	r18
     67e:	3f 93       	push	r19
     680:	4f 93       	push	r20
     682:	5f 93       	push	r21
     684:	6f 93       	push	r22
     686:	7f 93       	push	r23
     688:	8f 93       	push	r24
     68a:	9f 93       	push	r25
     68c:	af 93       	push	r26
     68e:	bf 93       	push	r27
     690:	ef 93       	push	r30
     692:	ff 93       	push	r31
	if (NULL != TIMER_OVF_CBK_PTR[TIMER_CH0])
     694:	e0 91 a2 00 	lds	r30, 0x00A2
     698:	f0 91 a3 00 	lds	r31, 0x00A3
     69c:	30 97       	sbiw	r30, 0x00	; 0
     69e:	09 f0       	breq	.+2      	; 0x6a2 <__vector_11+0x30>
	{
		TIMER_OVF_CBK_PTR[TIMER_CH0]();
     6a0:	09 95       	icall
	} 
	else
	{
		
	}
}
     6a2:	ff 91       	pop	r31
     6a4:	ef 91       	pop	r30
     6a6:	bf 91       	pop	r27
     6a8:	af 91       	pop	r26
     6aa:	9f 91       	pop	r25
     6ac:	8f 91       	pop	r24
     6ae:	7f 91       	pop	r23
     6b0:	6f 91       	pop	r22
     6b2:	5f 91       	pop	r21
     6b4:	4f 91       	pop	r20
     6b6:	3f 91       	pop	r19
     6b8:	2f 91       	pop	r18
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     6c4:	1f 92       	push	r1
     6c6:	0f 92       	push	r0
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	0f 92       	push	r0
     6cc:	11 24       	eor	r1, r1
     6ce:	2f 93       	push	r18
     6d0:	3f 93       	push	r19
     6d2:	4f 93       	push	r20
     6d4:	5f 93       	push	r21
     6d6:	6f 93       	push	r22
     6d8:	7f 93       	push	r23
     6da:	8f 93       	push	r24
     6dc:	9f 93       	push	r25
     6de:	af 93       	push	r26
     6e0:	bf 93       	push	r27
     6e2:	ef 93       	push	r30
     6e4:	ff 93       	push	r31
	if (NULL != TIMER_OVF_CBK_PTR[TIMER_CH1])
     6e6:	e0 91 a4 00 	lds	r30, 0x00A4
     6ea:	f0 91 a5 00 	lds	r31, 0x00A5
     6ee:	30 97       	sbiw	r30, 0x00	; 0
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <__vector_9+0x30>
	{
		TIMER_OVF_CBK_PTR[TIMER_CH1]();
     6f2:	09 95       	icall
	}
	else
	{
		
	}
}
     6f4:	ff 91       	pop	r31
     6f6:	ef 91       	pop	r30
     6f8:	bf 91       	pop	r27
     6fa:	af 91       	pop	r26
     6fc:	9f 91       	pop	r25
     6fe:	8f 91       	pop	r24
     700:	7f 91       	pop	r23
     702:	6f 91       	pop	r22
     704:	5f 91       	pop	r21
     706:	4f 91       	pop	r20
     708:	3f 91       	pop	r19
     70a:	2f 91       	pop	r18
     70c:	0f 90       	pop	r0
     70e:	0f be       	out	0x3f, r0	; 63
     710:	0f 90       	pop	r0
     712:	1f 90       	pop	r1
     714:	18 95       	reti

00000716 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
     716:	1f 92       	push	r1
     718:	0f 92       	push	r0
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	0f 92       	push	r0
     71e:	11 24       	eor	r1, r1
     720:	2f 93       	push	r18
     722:	3f 93       	push	r19
     724:	4f 93       	push	r20
     726:	5f 93       	push	r21
     728:	6f 93       	push	r22
     72a:	7f 93       	push	r23
     72c:	8f 93       	push	r24
     72e:	9f 93       	push	r25
     730:	af 93       	push	r26
     732:	bf 93       	push	r27
     734:	ef 93       	push	r30
     736:	ff 93       	push	r31
	if (NULL != TIMER_OVF_CBK_PTR[TIMER_CH2])
     738:	e0 91 a6 00 	lds	r30, 0x00A6
     73c:	f0 91 a7 00 	lds	r31, 0x00A7
     740:	30 97       	sbiw	r30, 0x00	; 0
     742:	09 f0       	breq	.+2      	; 0x746 <__vector_5+0x30>
	{
		TIMER_OVF_CBK_PTR[TIMER_CH2]();
     744:	09 95       	icall
	}
	else
	{
		
	}
}
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	bf 91       	pop	r27
     74c:	af 91       	pop	r26
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	7f 91       	pop	r23
     754:	6f 91       	pop	r22
     756:	5f 91       	pop	r21
     758:	4f 91       	pop	r20
     75a:	3f 91       	pop	r19
     75c:	2f 91       	pop	r18
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti

00000768 <UART_Init>:
 * \param *pUART_cfg_s : A pointer to a struct that holds the desired UART configuration
 * \return ERROR_STATUS : Indication to the function execution 
 *
 **/     
extern ERROR_STATUS UART_Init(UART_cfg_s *pUART_cfg_s)
{
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	00 d0       	rcall	.+0      	; 0x77a <UART_Init+0x12>
     77a:	00 d0       	rcall	.+0      	; 0x77c <UART_Init+0x14>
     77c:	00 d0       	rcall	.+0      	; 0x77e <UART_Init+0x16>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	8c 01       	movw	r16, r24
	if (NULL == pUART_cfg_s)
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	09 f4       	brne	.+2      	; 0x78a <UART_Init+0x22>
     788:	45 c1       	rjmp	.+650    	; 0xa14 <__stack+0x1b5>
	{
		return E_NOK;
	} 
	else
	{
		DIO_Cfg_s DIO_info_TX = {UART_TX_GPIO, UART_TX_BIT, OUTPUT};
     78a:	0f 2e       	mov	r0, r31
     78c:	f3 e0       	ldi	r31, 0x03	; 3
     78e:	ff 2e       	mov	r15, r31
     790:	f0 2d       	mov	r31, r0
     792:	fc 82       	std	Y+4, r15	; 0x04
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	8d 83       	std	Y+5, r24	; 0x05
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	8e 83       	std	Y+6, r24	; 0x06
		DIO_init(&DIO_info_TX);
     79c:	ce 01       	movw	r24, r28
     79e:	04 96       	adiw	r24, 0x04	; 4
     7a0:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_init>
		DIO_Cfg_s DIO_info_RX = {UART_RX_GPIO, UART_RX_BIT, INPUT};
     7a4:	f9 82       	std	Y+1, r15	; 0x01
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	8a 83       	std	Y+2, r24	; 0x02
     7aa:	1b 82       	std	Y+3, r1	; 0x03
		DIO_init(&DIO_info_RX);
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_init>
		if (NULL != pUART_cfg_s->Transmit_Cbk_ptr)
     7b4:	f8 01       	movw	r30, r16
     7b6:	82 85       	ldd	r24, Z+10	; 0x0a
     7b8:	93 85       	ldd	r25, Z+11	; 0x0b
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	21 f0       	breq	.+8      	; 0x7c6 <UART_Init+0x5e>
		{
			Transmitter_Cbk_ptr = pUART_cfg_s->Transmit_Cbk_ptr;
     7be:	90 93 b4 00 	sts	0x00B4, r25
     7c2:	80 93 b3 00 	sts	0x00B3, r24
		} 
		else
		{
			
		}
		if (NULL != pUART_cfg_s->Resceive_Cbk_ptr)
     7c6:	f8 01       	movw	r30, r16
     7c8:	84 85       	ldd	r24, Z+12	; 0x0c
     7ca:	95 85       	ldd	r25, Z+13	; 0x0d
     7cc:	00 97       	sbiw	r24, 0x00	; 0
     7ce:	21 f0       	breq	.+8      	; 0x7d8 <UART_Init+0x70>
		{
			Receiver_Cbk_ptr = pUART_cfg_s->Resceive_Cbk_ptr;
     7d0:	90 93 b2 00 	sts	0x00B2, r25
     7d4:	80 93 b1 00 	sts	0x00B1, r24
		}
		else
		{
			
		}
		if (NULL != pUART_cfg_s->DataRegisterEmpty_Cbk_ptr)
     7d8:	f8 01       	movw	r30, r16
     7da:	86 85       	ldd	r24, Z+14	; 0x0e
     7dc:	97 85       	ldd	r25, Z+15	; 0x0f
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	21 f0       	breq	.+8      	; 0x7ea <UART_Init+0x82>
		{
			DataRegisterEmpty_Cbk_ptr = pUART_cfg_s->DataRegisterEmpty_Cbk_ptr;
     7e2:	90 93 b0 00 	sts	0x00B0, r25
     7e6:	80 93 af 00 	sts	0x00AF, r24
		}
		else
		{
			
		}
		switch(pUART_cfg_s->u8_DoubleSpeed)
     7ea:	f8 01       	movw	r30, r16
     7ec:	82 81       	ldd	r24, Z+2	; 0x02
     7ee:	88 23       	and	r24, r24
     7f0:	21 f0       	breq	.+8      	; 0x7fa <UART_Init+0x92>
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <UART_Init+0x90>
     7f6:	4d c0       	rjmp	.+154    	; 0x892 <__stack+0x33>
     7f8:	0b c1       	rjmp	.+534    	; 0xa10 <__stack+0x1b1>
		{
			case UART_NO_DOUBLE_SPEED:
				UART_CSRA &= ~UART_U2X; 
     7fa:	59 98       	cbi	0x0b, 1	; 11
				UART_BRRL = (uint8) ((F_CPU / (SIXTEEN * pUART_cfg_s->u32_BaudRate)) - ONE);
     7fc:	f8 01       	movw	r30, r16
     7fe:	86 81       	ldd	r24, Z+6	; 0x06
     800:	97 81       	ldd	r25, Z+7	; 0x07
     802:	a0 85       	ldd	r26, Z+8	; 0x08
     804:	b1 85       	ldd	r27, Z+9	; 0x09
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	aa 1f       	adc	r26, r26
     80c:	bb 1f       	adc	r27, r27
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	9c 01       	movw	r18, r24
     818:	ad 01       	movw	r20, r26
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	44 1f       	adc	r20, r20
     820:	55 1f       	adc	r21, r21
     822:	22 0f       	add	r18, r18
     824:	33 1f       	adc	r19, r19
     826:	44 1f       	adc	r20, r20
     828:	55 1f       	adc	r21, r21
     82a:	0f 2e       	mov	r0, r31
     82c:	c1 2c       	mov	r12, r1
     82e:	f4 e2       	ldi	r31, 0x24	; 36
     830:	df 2e       	mov	r13, r31
     832:	f4 ef       	ldi	r31, 0xF4	; 244
     834:	ef 2e       	mov	r14, r31
     836:	f1 2c       	mov	r15, r1
     838:	f0 2d       	mov	r31, r0
     83a:	c7 01       	movw	r24, r14
     83c:	b6 01       	movw	r22, r12
     83e:	0e 94 9d 08 	call	0x113a	; 0x113a <__udivmodsi4>
     842:	21 50       	subi	r18, 0x01	; 1
     844:	29 b9       	out	0x09, r18	; 9
				UART_BRRH = (uint8) (((F_CPU / (SIXTEEN * pUART_cfg_s->u32_BaudRate)) - ONE)>>EIGHT);
     846:	f8 01       	movw	r30, r16
     848:	86 81       	ldd	r24, Z+6	; 0x06
     84a:	97 81       	ldd	r25, Z+7	; 0x07
     84c:	a0 85       	ldd	r26, Z+8	; 0x08
     84e:	b1 85       	ldd	r27, Z+9	; 0x09
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	aa 1f       	adc	r26, r26
     856:	bb 1f       	adc	r27, r27
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	aa 1f       	adc	r26, r26
     85e:	bb 1f       	adc	r27, r27
     860:	9c 01       	movw	r18, r24
     862:	ad 01       	movw	r20, r26
     864:	22 0f       	add	r18, r18
     866:	33 1f       	adc	r19, r19
     868:	44 1f       	adc	r20, r20
     86a:	55 1f       	adc	r21, r21
     86c:	22 0f       	add	r18, r18
     86e:	33 1f       	adc	r19, r19
     870:	44 1f       	adc	r20, r20
     872:	55 1f       	adc	r21, r21
     874:	c7 01       	movw	r24, r14
     876:	b6 01       	movw	r22, r12
     878:	0e 94 9d 08 	call	0x113a	; 0x113a <__udivmodsi4>
     87c:	da 01       	movw	r26, r20
     87e:	c9 01       	movw	r24, r18
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	a1 09       	sbc	r26, r1
     884:	b1 09       	sbc	r27, r1
     886:	89 2f       	mov	r24, r25
     888:	9a 2f       	mov	r25, r26
     88a:	ab 2f       	mov	r26, r27
     88c:	bb 27       	eor	r27, r27
     88e:	80 bd       	out	0x20, r24	; 32
				break;
     890:	43 c0       	rjmp	.+134    	; 0x918 <__stack+0xb9>
			case UART_DOUBLE_SPEED:
				UART_CSRA |= UART_U2X;
     892:	59 9a       	sbi	0x0b, 1	; 11
				UART_BRRL = (uint8) ((F_CPU / (EIGHT * pUART_cfg_s->u32_BaudRate)) - ONE);
     894:	f8 01       	movw	r30, r16
     896:	86 81       	ldd	r24, Z+6	; 0x06
     898:	97 81       	ldd	r25, Z+7	; 0x07
     89a:	a0 85       	ldd	r26, Z+8	; 0x08
     89c:	b1 85       	ldd	r27, Z+9	; 0x09
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	aa 1f       	adc	r26, r26
     8a4:	bb 1f       	adc	r27, r27
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	aa 1f       	adc	r26, r26
     8ac:	bb 1f       	adc	r27, r27
     8ae:	9c 01       	movw	r18, r24
     8b0:	ad 01       	movw	r20, r26
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	44 1f       	adc	r20, r20
     8b8:	55 1f       	adc	r21, r21
     8ba:	0f 2e       	mov	r0, r31
     8bc:	c1 2c       	mov	r12, r1
     8be:	f4 e2       	ldi	r31, 0x24	; 36
     8c0:	df 2e       	mov	r13, r31
     8c2:	f4 ef       	ldi	r31, 0xF4	; 244
     8c4:	ef 2e       	mov	r14, r31
     8c6:	f1 2c       	mov	r15, r1
     8c8:	f0 2d       	mov	r31, r0
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	0e 94 9d 08 	call	0x113a	; 0x113a <__udivmodsi4>
     8d2:	21 50       	subi	r18, 0x01	; 1
     8d4:	29 b9       	out	0x09, r18	; 9
				UART_BRRH = (uint8) (((F_CPU / (EIGHT * pUART_cfg_s->u32_BaudRate)) - ONE)>>EIGHT);
     8d6:	f8 01       	movw	r30, r16
     8d8:	86 81       	ldd	r24, Z+6	; 0x06
     8da:	97 81       	ldd	r25, Z+7	; 0x07
     8dc:	a0 85       	ldd	r26, Z+8	; 0x08
     8de:	b1 85       	ldd	r27, Z+9	; 0x09
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	aa 1f       	adc	r26, r26
     8e6:	bb 1f       	adc	r27, r27
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	aa 1f       	adc	r26, r26
     8ee:	bb 1f       	adc	r27, r27
     8f0:	9c 01       	movw	r18, r24
     8f2:	ad 01       	movw	r20, r26
     8f4:	22 0f       	add	r18, r18
     8f6:	33 1f       	adc	r19, r19
     8f8:	44 1f       	adc	r20, r20
     8fa:	55 1f       	adc	r21, r21
     8fc:	c7 01       	movw	r24, r14
     8fe:	b6 01       	movw	r22, r12
     900:	0e 94 9d 08 	call	0x113a	; 0x113a <__udivmodsi4>
     904:	da 01       	movw	r26, r20
     906:	c9 01       	movw	r24, r18
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	a1 09       	sbc	r26, r1
     90c:	b1 09       	sbc	r27, r1
     90e:	89 2f       	mov	r24, r25
     910:	9a 2f       	mov	r25, r26
     912:	ab 2f       	mov	r26, r27
     914:	bb 27       	eor	r27, r27
     916:	80 bd       	out	0x20, r24	; 32
				break;
			default:
				return E_NOK;
		}		
		switch(pUART_cfg_s->u8_DesiredOperation)
     918:	f8 01       	movw	r30, r16
     91a:	81 81       	ldd	r24, Z+1	; 0x01
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	b1 f0       	breq	.+44     	; 0x94c <__stack+0xed>
     920:	18 f0       	brcs	.+6      	; 0x928 <__stack+0xc9>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	29 f1       	breq	.+74     	; 0x970 <__stack+0x111>
     926:	74 c0       	rjmp	.+232    	; 0xa10 <__stack+0x1b1>
		{
			case TRANSMITTER:
				switch(pUART_cfg_s->u8_InterruptMode)
     928:	f8 01       	movw	r30, r16
     92a:	80 81       	ld	r24, Z
     92c:	88 23       	and	r24, r24
     92e:	39 f0       	breq	.+14     	; 0x93e <__stack+0xdf>
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	09 f0       	breq	.+2      	; 0x936 <__stack+0xd7>
     934:	6d c0       	rjmp	.+218    	; 0xa10 <__stack+0x1b1>
				{
					case UART_INTERRUPT:
					UART_CSRB |= UART_TXCIE;
     936:	56 9a       	sbi	0x0a, 6	; 10
					gu8_interrupt_mode = UART_INTERRUPT;
     938:	80 93 ae 00 	sts	0x00AE, r24
					break;
     93c:	05 c0       	rjmp	.+10     	; 0x948 <__stack+0xe9>
					case UART_POLLING:
					UART_CSRB &= ~(UART_DRIE|UART_TXCIE|UART_RXCIE);
     93e:	8a b1       	in	r24, 0x0a	; 10
     940:	8f 71       	andi	r24, 0x1F	; 31
     942:	8a b9       	out	0x0a, r24	; 10
					gu8_interrupt_mode = UART_POLLING;
     944:	10 92 ae 00 	sts	0x00AE, r1
					break;
					default:
					return E_NOK;
				}
				UART_CSRB |= UART_TXEN;
     948:	53 9a       	sbi	0x0a, 3	; 10
				break;
     94a:	28 c0       	rjmp	.+80     	; 0x99c <__stack+0x13d>
			case RECEIVER:
				switch(pUART_cfg_s->u8_InterruptMode)
     94c:	f8 01       	movw	r30, r16
     94e:	80 81       	ld	r24, Z
     950:	88 23       	and	r24, r24
     952:	39 f0       	breq	.+14     	; 0x962 <__stack+0x103>
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	09 f0       	breq	.+2      	; 0x95a <__stack+0xfb>
     958:	5b c0       	rjmp	.+182    	; 0xa10 <__stack+0x1b1>
				{
					case UART_INTERRUPT:
					UART_CSRB |= UART_RXCIE;
     95a:	57 9a       	sbi	0x0a, 7	; 10
					gu8_interrupt_mode = UART_INTERRUPT;
     95c:	80 93 ae 00 	sts	0x00AE, r24
					break;
     960:	05 c0       	rjmp	.+10     	; 0x96c <__stack+0x10d>
					case UART_POLLING:
					UART_CSRB &= ~(UART_DRIE|UART_TXCIE|UART_RXCIE);
     962:	8a b1       	in	r24, 0x0a	; 10
     964:	8f 71       	andi	r24, 0x1F	; 31
     966:	8a b9       	out	0x0a, r24	; 10
					gu8_interrupt_mode = UART_POLLING;
     968:	10 92 ae 00 	sts	0x00AE, r1
					break;
					default:
					return E_NOK;
				}
				UART_CSRB |= UART_RXEN;
     96c:	54 9a       	sbi	0x0a, 4	; 10
				break;			
     96e:	16 c0       	rjmp	.+44     	; 0x99c <__stack+0x13d>
			case TRANSCEIVER:
				switch(pUART_cfg_s->u8_InterruptMode)
     970:	f8 01       	movw	r30, r16
     972:	80 81       	ld	r24, Z
     974:	88 23       	and	r24, r24
     976:	51 f0       	breq	.+20     	; 0x98c <__stack+0x12d>
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x11f>
     97c:	49 c0       	rjmp	.+146    	; 0xa10 <__stack+0x1b1>
				{
					case UART_INTERRUPT:
					UART_CSRB |= UART_TXCIE|UART_RXCIE;
     97e:	8a b1       	in	r24, 0x0a	; 10
     980:	80 6c       	ori	r24, 0xC0	; 192
     982:	8a b9       	out	0x0a, r24	; 10
					gu8_interrupt_mode = UART_INTERRUPT;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 ae 00 	sts	0x00AE, r24
					break;
     98a:	05 c0       	rjmp	.+10     	; 0x996 <__stack+0x137>
					case UART_POLLING:
					UART_CSRB &= ~(UART_DRIE|UART_TXCIE|UART_RXCIE);
     98c:	8a b1       	in	r24, 0x0a	; 10
     98e:	8f 71       	andi	r24, 0x1F	; 31
     990:	8a b9       	out	0x0a, r24	; 10
					gu8_interrupt_mode = UART_POLLING;
     992:	10 92 ae 00 	sts	0x00AE, r1
					break;
					default:
					return E_NOK;
				}
				UART_CSRB |= UART_TXEN|UART_RXEN;
     996:	8a b1       	in	r24, 0x0a	; 10
     998:	88 61       	ori	r24, 0x18	; 24
     99a:	8a b9       	out	0x0a, r24	; 10
				break;
			default:
				return E_NOK;
		}
		switch(pUART_cfg_s->u8_ParityBit)
     99c:	f8 01       	movw	r30, r16
     99e:	84 81       	ldd	r24, Z+4	; 0x04
     9a0:	82 30       	cpi	r24, 0x02	; 2
     9a2:	29 f0       	breq	.+10     	; 0x9ae <__stack+0x14f>
     9a4:	83 30       	cpi	r24, 0x03	; 3
     9a6:	39 f0       	breq	.+14     	; 0x9b6 <__stack+0x157>
     9a8:	81 11       	cpse	r24, r1
     9aa:	32 c0       	rjmp	.+100    	; 0xa10 <__stack+0x1b1>
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <__stack+0x15d>
		{
			case UART_NO_PARITY:
				/*   DEFAULT BY ZERO                          */
				break;
			case UART_EVEN_PARITY:
				UART_CSRC |= UART_RSEL|UART_PM1;
     9ae:	80 b5       	in	r24, 0x20	; 32
     9b0:	80 6a       	ori	r24, 0xA0	; 160
     9b2:	80 bd       	out	0x20, r24	; 32
				break;
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <__stack+0x15d>
			case UART_ODD_PARITY:
				UART_CSRC |= UART_RSEL|UART_PM1|UART_PM0;
     9b6:	80 b5       	in	r24, 0x20	; 32
     9b8:	80 6b       	ori	r24, 0xB0	; 176
     9ba:	80 bd       	out	0x20, r24	; 32
				break;
			default:
				return E_NOK;		
		}
		switch(pUART_cfg_s->u8_StopBit)
     9bc:	f8 01       	movw	r30, r16
     9be:	83 81       	ldd	r24, Z+3	; 0x03
     9c0:	88 23       	and	r24, r24
     9c2:	29 f0       	breq	.+10     	; 0x9ce <__stack+0x16f>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	21 f5       	brne	.+72     	; 0xa10 <__stack+0x1b1>
		{
			case UART_ONE_STOP_BIT:
				/*   DEFAULT BY ZERO                          */
				break;
			case UART_TWO_STOP_BIT:
				UART_CSRC |= UART_RSEL|UART_SBS;
     9c8:	80 b5       	in	r24, 0x20	; 32
     9ca:	88 68       	ori	r24, 0x88	; 136
     9cc:	80 bd       	out	0x20, r24	; 32
				break;
			default:
				return E_NOK;	
		}
		switch(pUART_cfg_s->u8_DataSize)
     9ce:	f8 01       	movw	r30, r16
     9d0:	85 81       	ldd	r24, Z+5	; 0x05
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	79 f0       	breq	.+30     	; 0x9f4 <__stack+0x195>
     9d6:	28 f4       	brcc	.+10     	; 0x9e2 <__stack+0x183>
     9d8:	88 23       	and	r24, r24
     9da:	c1 f0       	breq	.+48     	; 0xa0c <__stack+0x1ad>
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	31 f0       	breq	.+12     	; 0x9ec <__stack+0x18d>
     9e0:	17 c0       	rjmp	.+46     	; 0xa10 <__stack+0x1b1>
     9e2:	83 30       	cpi	r24, 0x03	; 3
     9e4:	59 f0       	breq	.+22     	; 0x9fc <__stack+0x19d>
     9e6:	87 30       	cpi	r24, 0x07	; 7
     9e8:	69 f0       	breq	.+26     	; 0xa04 <__stack+0x1a5>
     9ea:	12 c0       	rjmp	.+36     	; 0xa10 <__stack+0x1b1>
		{
			case UART_5_BIT:
				/*   DEFAULT BY ZERO                          */
				break;
			case UART_6_BIT:
				UART_CSRC |= UART_RSEL|UART_CSZ0;
     9ec:	80 b5       	in	r24, 0x20	; 32
     9ee:	82 68       	ori	r24, 0x82	; 130
     9f0:	80 bd       	out	0x20, r24	; 32
				break;
     9f2:	0c c0       	rjmp	.+24     	; 0xa0c <__stack+0x1ad>
			case UART_7_BIT:
				UART_CSRC |= UART_RSEL|UART_CSZ1;
     9f4:	80 b5       	in	r24, 0x20	; 32
     9f6:	84 68       	ori	r24, 0x84	; 132
     9f8:	80 bd       	out	0x20, r24	; 32
				break;
     9fa:	08 c0       	rjmp	.+16     	; 0xa0c <__stack+0x1ad>
			case UART_8_BIT:
				UART_CSRC |= UART_RSEL|UART_CSZ0|UART_CSZ1;
     9fc:	80 b5       	in	r24, 0x20	; 32
     9fe:	86 68       	ori	r24, 0x86	; 134
     a00:	80 bd       	out	0x20, r24	; 32
				break;
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__stack+0x1ad>
			case UART_9_BIT:
				UART_CSRC |= UART_RSEL|UART_CSZ0|UART_CSZ1;
     a04:	80 b5       	in	r24, 0x20	; 32
     a06:	86 68       	ori	r24, 0x86	; 134
     a08:	80 bd       	out	0x20, r24	; 32
				UART_CSRB |= UART_CSZ2;
     a0a:	52 9a       	sbi	0x0a, 2	; 10
			default:
				return E_NOK;
		}
		
	}
	return E_OK;
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <__stack+0x1b7>
				UART_CSRA |= UART_U2X;
				UART_BRRL = (uint8) ((F_CPU / (EIGHT * pUART_cfg_s->u32_BaudRate)) - ONE);
				UART_BRRH = (uint8) (((F_CPU / (EIGHT * pUART_cfg_s->u32_BaudRate)) - ONE)>>EIGHT);
				break;
			default:
				return E_NOK;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <__stack+0x1b7>
 **/     
extern ERROR_STATUS UART_Init(UART_cfg_s *pUART_cfg_s)
{
	if (NULL == pUART_cfg_s)
	{
		return E_NOK;
     a14:	81 e0       	ldi	r24, 0x01	; 1
				return E_NOK;
		}
		
	}
	return E_OK;
}
     a16:	26 96       	adiw	r28, 0x06	; 6
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	df 90       	pop	r13
     a30:	cf 90       	pop	r12
     a32:	08 95       	ret

00000a34 <UART_Deinit>:
 * \param void
 * \return ERROR_STATUS : Indication to the function execution 
 *
 **/     
extern ERROR_STATUS UART_Deinit(void)
{
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <UART_Deinit+0x8>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <UART_Deinit+0xa>
     a3e:	00 d0       	rcall	.+0      	; 0xa40 <UART_Deinit+0xc>
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
	Transmitter_Cbk_ptr = NULL;
     a44:	10 92 b4 00 	sts	0x00B4, r1
     a48:	10 92 b3 00 	sts	0x00B3, r1
	Receiver_Cbk_ptr = NULL;
     a4c:	10 92 b2 00 	sts	0x00B2, r1
     a50:	10 92 b1 00 	sts	0x00B1, r1
	DataRegisterEmpty_Cbk_ptr = NULL;
     a54:	10 92 b0 00 	sts	0x00B0, r1
     a58:	10 92 af 00 	sts	0x00AF, r1
	UART_CSRA = ZERO_INITIALIZATION;
     a5c:	1b b8       	out	0x0b, r1	; 11
	UART_CSRB = ZERO_INITIALIZATION;
     a5e:	1a b8       	out	0x0a, r1	; 10
	UART_CSRC = EIGHTY_INITIALIATION;
     a60:	80 e8       	ldi	r24, 0x80	; 128
     a62:	80 bd       	out	0x20, r24	; 32
	UART_BRRH = ZERO_INITIALIZATION;
     a64:	10 bc       	out	0x20, r1	; 32
	UART_BRRL = ZERO_INITIALIZATION;
     a66:	19 b8       	out	0x09, r1	; 9
	DIO_Cfg_s DIO_info_TX = {UART_TX_GPIO, UART_TX_BIT, INPUT};
     a68:	13 e0       	ldi	r17, 0x03	; 3
     a6a:	19 83       	std	Y+1, r17	; 0x01
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	8a 83       	std	Y+2, r24	; 0x02
     a70:	1b 82       	std	Y+3, r1	; 0x03
	DIO_init(&DIO_info_TX);
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_init>
	DIO_Cfg_s DIO_info_RX = {UART_RX_GPIO, UART_RX_BIT, INPUT};
     a7a:	1c 83       	std	Y+4, r17	; 0x04
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	8d 83       	std	Y+5, r24	; 0x05
     a80:	1e 82       	std	Y+6, r1	; 0x06
	DIO_init(&DIO_info_RX);
     a82:	ce 01       	movw	r24, r28
     a84:	04 96       	adiw	r24, 0x04	; 4
     a86:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_init>
	gu8_interrupt_mode = UART_POLLING;
     a8a:	10 92 ae 00 	sts	0x00AE, r1
	return E_OK;
	
}
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	26 96       	adiw	r28, 0x06	; 6
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	08 95       	ret

00000aa4 <UART_SendByte>:
 * \return ERROR_STATUS : Indication to the function execution 
 *
 **/  
extern ERROR_STATUS UART_SendByte(uint8 u8_Data)
{
	switch(gu8_interrupt_mode)
     aa4:	90 91 ae 00 	lds	r25, 0x00AE
     aa8:	99 23       	and	r25, r25
     aaa:	19 f0       	breq	.+6      	; 0xab2 <UART_SendByte+0xe>
     aac:	91 30       	cpi	r25, 0x01	; 1
     aae:	29 f0       	breq	.+10     	; 0xaba <UART_SendByte+0x16>
     ab0:	05 c0       	rjmp	.+10     	; 0xabc <UART_SendByte+0x18>
	{
		case UART_POLLING:
			while (!( UART_CSRA & UART_DRE));
     ab2:	5d 9b       	sbis	0x0b, 5	; 11
     ab4:	fe cf       	rjmp	.-4      	; 0xab2 <UART_SendByte+0xe>
			UART_DR = u8_Data;
     ab6:	8c b9       	out	0x0c, r24	; 12
			break;
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <UART_SendByte+0x18>
		case UART_INTERRUPT:
			UART_DR = u8_Data;
     aba:	8c b9       	out	0x0c, r24	; 12
			break;	
	}

	return E_OK;
}
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	08 95       	ret

00000ac0 <UART_ReceiveByte>:
 * \return ERROR_STATUS : Indication to the function execution 
 *
 **/  
extern ERROR_STATUS UART_ReceiveByte(uint8 *pu8_ReceivedData)
{
	switch(gu8_interrupt_mode)
     ac0:	20 91 ae 00 	lds	r18, 0x00AE
     ac4:	22 23       	and	r18, r18
     ac6:	19 f0       	breq	.+6      	; 0xace <UART_ReceiveByte+0xe>
     ac8:	21 30       	cpi	r18, 0x01	; 1
     aca:	39 f0       	breq	.+14     	; 0xada <UART_ReceiveByte+0x1a>
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <UART_ReceiveByte+0x20>
	{
		case UART_POLLING:
			while (!(UART_CSRA & UART_RXC));
     ace:	5f 9b       	sbis	0x0b, 7	; 11
     ad0:	fe cf       	rjmp	.-4      	; 0xace <UART_ReceiveByte+0xe>
			*pu8_ReceivedData = UART_DR;
     ad2:	2c b1       	in	r18, 0x0c	; 12
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
			break;
     ad8:	03 c0       	rjmp	.+6      	; 0xae0 <UART_ReceiveByte+0x20>
		case UART_INTERRUPT:
			*pu8_ReceivedData = UART_DR;
     ada:	2c b1       	in	r18, 0x0c	; 12
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
			break;
	}
	return E_OK;
}
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	08 95       	ret

00000ae4 <__vector_15>:

ISR(USART_TXC_vect)
{
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	2f 93       	push	r18
     af0:	3f 93       	push	r19
     af2:	4f 93       	push	r20
     af4:	5f 93       	push	r21
     af6:	6f 93       	push	r22
     af8:	7f 93       	push	r23
     afa:	8f 93       	push	r24
     afc:	9f 93       	push	r25
     afe:	af 93       	push	r26
     b00:	bf 93       	push	r27
     b02:	ef 93       	push	r30
     b04:	ff 93       	push	r31
	if (NULL != Transmitter_Cbk_ptr)
     b06:	e0 91 b3 00 	lds	r30, 0x00B3
     b0a:	f0 91 b4 00 	lds	r31, 0x00B4
     b0e:	30 97       	sbiw	r30, 0x00	; 0
     b10:	09 f0       	breq	.+2      	; 0xb14 <__vector_15+0x30>
	{
		Transmitter_Cbk_ptr();
     b12:	09 95       	icall
	} 
	else
	{
		
	}
}
     b14:	ff 91       	pop	r31
     b16:	ef 91       	pop	r30
     b18:	bf 91       	pop	r27
     b1a:	af 91       	pop	r26
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	7f 91       	pop	r23
     b22:	6f 91       	pop	r22
     b24:	5f 91       	pop	r21
     b26:	4f 91       	pop	r20
     b28:	3f 91       	pop	r19
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_14>:

ISR(USART_UDRE_vect)
{
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
	if (NULL != DataRegisterEmpty_Cbk_ptr)
     b58:	e0 91 af 00 	lds	r30, 0x00AF
     b5c:	f0 91 b0 00 	lds	r31, 0x00B0
     b60:	30 97       	sbiw	r30, 0x00	; 0
     b62:	09 f0       	breq	.+2      	; 0xb66 <__vector_14+0x30>
	{
		DataRegisterEmpty_Cbk_ptr();
     b64:	09 95       	icall
	}
	else
	{
		
	}
}
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	3f 91       	pop	r19
     b7c:	2f 91       	pop	r18
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	0f 90       	pop	r0
     b84:	1f 90       	pop	r1
     b86:	18 95       	reti

00000b88 <__vector_13>:

ISR(USART_RXC_vect)
{
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
	if (NULL != Receiver_Cbk_ptr)
     baa:	e0 91 b1 00 	lds	r30, 0x00B1
     bae:	f0 91 b2 00 	lds	r31, 0x00B2
     bb2:	30 97       	sbiw	r30, 0x00	; 0
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <__vector_13+0x30>
	{
		Receiver_Cbk_ptr();
     bb6:	09 95       	icall
	}
	else
	{
		
	}
}
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	bf 91       	pop	r27
     bbe:	af 91       	pop	r26
     bc0:	9f 91       	pop	r25
     bc2:	8f 91       	pop	r24
     bc4:	7f 91       	pop	r23
     bc6:	6f 91       	pop	r22
     bc8:	5f 91       	pop	r21
     bca:	4f 91       	pop	r20
     bcc:	3f 91       	pop	r19
     bce:	2f 91       	pop	r18
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <BCM_SendUART_Cbk>:
		
	}
}
void(BCM_SendUART_Cbk)(void)
{
	if (BCM_STATE_TX == gau8_BCM_StateMachineStatus[BCM_UART])
     bda:	80 91 bf 00 	lds	r24, 0x00BF
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <BCM_SendUART_Cbk+0xe>
	{
		gau8_BCM_StateMachineStatus[BCM_UART] = BCM_STATE_TX_COMPLETE;
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	80 93 bf 00 	sts	0x00BF, r24
     be8:	08 95       	ret

00000bea <BCM_ReceiveUART_Cbk>:



void(BCM_ReceiveUART_Cbk)(void)
{
	UART_ReceiveByte(&gu8_TempData[BCM_UART]);
     bea:	87 eb       	ldi	r24, 0xB7	; 183
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 60 05 	call	0xac0	; 0xac0 <UART_ReceiveByte>
	if (BCM_STATE_RX == gau8_BCM_StateMachineStatus[BCM_UART])
     bf2:	80 91 bf 00 	lds	r24, 0x00BF
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	19 f4       	brne	.+6      	; 0xc00 <BCM_ReceiveUART_Cbk+0x16>
	{
		gau8_BCM_StateMachineStatus[BCM_UART] = BCM_STATE_RX_COMPLETE;
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	80 93 bf 00 	sts	0x00BF, r24
     c00:	08 95       	ret

00000c02 <BCM_Init>:
 */
ERROR_STATUS 
BCM_Init(void)
{
	uint8 u8_retval = BCM_BASE_ERR + SUCCESS;
	if (BCM_UNINIT == gu8_BCM_Status)
     c02:	80 91 7b 00 	lds	r24, 0x007B
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	c1 f5       	brne	.+112    	; 0xc7a <BCM_Init+0x78>
	{
		uint8 u8_index;
		for (u8_index = 0; u8_index < BCM_MAX_CH_NUM; u8_index++)
		{
			/* initial values for module elements */
			gastr_BCM_Buffer[u8_index].u8_BCM_ID = 0;
     c0a:	10 92 c3 00 	sts	0x00C3, r1
			gastr_BCM_Buffer[u8_index].u16_BCM_Size = 0;
     c0e:	10 92 c5 00 	sts	0x00C5, r1
     c12:	10 92 c4 00 	sts	0x00C4, r1
			gastr_BCM_Buffer[u8_index].u8ptr_BCM_Data = NULL;
     c16:	10 92 c7 00 	sts	0x00C7, r1
     c1a:	10 92 c6 00 	sts	0x00C6, r1
			gastr_BCM_Buffer[u8_index].u8_BCM_CheckSum = 0;
     c1e:	10 92 c8 00 	sts	0x00C8, r1
			gau8_BCM_BufferStatus[u8_index] = BCM_BUFFER_UNLOCKED;
     c22:	80 93 c1 00 	sts	0x00C1, r24
			gau8_BCM_StateMachineStatus[u8_index] = BCM_STATE_IDLE;
     c26:	10 92 bf 00 	sts	0x00BF, r1
			gau8_BCM_TranceivingStatus[u8_index] = BCM_SEND_ID;
     c2a:	10 92 bd 00 	sts	0x00BD, r1
			gau16_BCM_SizeCounter[u8_index] = 0;
     c2e:	10 92 ba 00 	sts	0x00BA, r1
     c32:	10 92 b9 00 	sts	0x00B9, r1
			gu8_TempData[u8_index] = 0;
     c36:	10 92 b7 00 	sts	0x00B7, r1
			gu16_ReceivedSize[u8_index] = 0;
     c3a:	10 92 b5 00 	sts	0x00B5, r1
	{
		uint8 u8_index;
		for (u8_index = 0; u8_index < BCM_MAX_CH_NUM; u8_index++)
		{
			/* initial values for module elements */
			gastr_BCM_Buffer[u8_index].u8_BCM_ID = 0;
     c3e:	10 92 c9 00 	sts	0x00C9, r1
			gastr_BCM_Buffer[u8_index].u16_BCM_Size = 0;
     c42:	10 92 cb 00 	sts	0x00CB, r1
     c46:	10 92 ca 00 	sts	0x00CA, r1
			gastr_BCM_Buffer[u8_index].u8ptr_BCM_Data = NULL;
     c4a:	10 92 cd 00 	sts	0x00CD, r1
     c4e:	10 92 cc 00 	sts	0x00CC, r1
			gastr_BCM_Buffer[u8_index].u8_BCM_CheckSum = 0;
     c52:	10 92 ce 00 	sts	0x00CE, r1
			gau8_BCM_BufferStatus[u8_index] = BCM_BUFFER_UNLOCKED;
     c56:	80 93 c2 00 	sts	0x00C2, r24
			gau8_BCM_StateMachineStatus[u8_index] = BCM_STATE_IDLE;
     c5a:	10 92 c0 00 	sts	0x00C0, r1
			gau8_BCM_TranceivingStatus[u8_index] = BCM_SEND_ID;
     c5e:	10 92 be 00 	sts	0x00BE, r1
			gau16_BCM_SizeCounter[u8_index] = 0;
     c62:	10 92 bc 00 	sts	0x00BC, r1
     c66:	10 92 bb 00 	sts	0x00BB, r1
			gu8_TempData[u8_index] = 0;
     c6a:	10 92 b8 00 	sts	0x00B8, r1
			gu16_ReceivedSize[u8_index] = 0;
     c6e:	10 92 b6 00 	sts	0x00B6, r1
		}
		gu8_BCM_Status = BCM_INIT;
     c72:	10 92 7b 00 	sts	0x007B, r1
 * 							
 */
ERROR_STATUS 
BCM_Init(void)
{
	uint8 u8_retval = BCM_BASE_ERR + SUCCESS;
     c76:	84 e6       	ldi	r24, 0x64	; 100
     c78:	08 95       	ret
		}
		gu8_BCM_Status = BCM_INIT;
	} 
	else
	{
		u8_retval = BCM_BASE_ERR + ALREADY_INITIALIZED_ERR;
     c7a:	87 e6       	ldi	r24, 0x67	; 103
	}
	return u8_retval;
}
     c7c:	08 95       	ret

00000c7e <BCM_Send>:
 * Description: This function starts sending data through desired channel.
 * 							
 */
ERROR_STATUS 
BCM_Send(uint8 u8_BCM_ID, uint16 u16_BCM_Size, uint8 *u8ptr_BCM_Data)
{
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	60 97       	sbiw	r28, 0x10	; 16
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
	uint8 u8_retval = BCM_BASE_ERR + SUCCESS;
	if (BCM_INIT == gu8_BCM_Status)
     c92:	90 91 7b 00 	lds	r25, 0x007B
     c96:	91 11       	cpse	r25, r1
     c98:	3d c0       	rjmp	.+122    	; 0xd14 <BCM_Send+0x96>
	{
		if (u8_BCM_ID < BCM_MAX_CH_NUM)
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	e8 f5       	brcc	.+122    	; 0xd18 <BCM_Send+0x9a>
		{
			if (BCM_BUFFER_UNLOCKED == gau8_BCM_BufferStatus[u8_BCM_ID])
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	f9 01       	movw	r30, r18
     ca4:	ef 53       	subi	r30, 0x3F	; 63
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	90 81       	ld	r25, Z
     caa:	91 30       	cpi	r25, 0x01	; 1
     cac:	b9 f5       	brne	.+110    	; 0xd1c <BCM_Send+0x9e>
			{
				switch(u8_BCM_ID)
     cae:	88 23       	and	r24, r24
     cb0:	21 f0       	breq	.+8      	; 0xcba <BCM_Send+0x3c>
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	69 f1       	breq	.+90     	; 0xd10 <BCM_Send+0x92>
 * 							
 */
ERROR_STATUS 
BCM_Send(uint8 u8_BCM_ID, uint16 u16_BCM_Size, uint8 *u8ptr_BCM_Data)
{
	uint8 u8_retval = BCM_BASE_ERR + SUCCESS;
     cb6:	84 e6       	ldi	r24, 0x64	; 100
     cb8:	32 c0       	rjmp	.+100    	; 0xd1e <BCM_Send+0xa0>
					case BCM_UART:
						/* uart init
						 * module state init
						 * send state init
						 * buffer state init */
						gastr_BCM_Buffer[u8_BCM_ID].u8_BCM_ID = u8_BCM_ID;
     cba:	f9 01       	movw	r30, r18
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	e2 0f       	add	r30, r18
     cc2:	f3 1f       	adc	r31, r19
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	ed 53       	subi	r30, 0x3D	; 61
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	10 82       	st	Z, r1
						gastr_BCM_Buffer[u8_BCM_ID].u16_BCM_Size = u16_BCM_Size;
     cce:	72 83       	std	Z+2, r23	; 0x02
     cd0:	61 83       	std	Z+1, r22	; 0x01
						gastr_BCM_Buffer[u8_BCM_ID].u8ptr_BCM_Data = u8ptr_BCM_Data;
     cd2:	54 83       	std	Z+4, r21	; 0x04
     cd4:	43 83       	std	Z+3, r20	; 0x03
						gastr_BCM_Buffer[u8_BCM_ID].u8_BCM_CheckSum = 0;
     cd6:	15 82       	std	Z+5, r1	; 0x05
						gau8_BCM_TranceivingStatus[u8_BCM_ID] = BCM_SEND_ID;
     cd8:	f9 01       	movw	r30, r18
     cda:	e3 54       	subi	r30, 0x43	; 67
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	10 82       	st	Z, r1
						gau8_BCM_StateMachineStatus[u8_BCM_ID] = BCM_STATE_TX_COMPLETE;
     ce0:	f9 01       	movw	r30, r18
     ce2:	e1 54       	subi	r30, 0x41	; 65
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	83 e0       	ldi	r24, 0x03	; 3
     ce8:	80 83       	st	Z, r24
						gau8_BCM_BufferStatus[u8_BCM_ID] = BCM_BUFFER_LOCKED;
     cea:	f9 01       	movw	r30, r18
     cec:	ef 53       	subi	r30, 0x3F	; 63
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	10 82       	st	Z, r1
						UART_cfg_s UART_Info = {UART_INTERRUPT, TRANSMITTER, UART_NO_DOUBLE_SPEED, UART_ONE_STOP_BIT,\
     cf2:	80 e1       	ldi	r24, 0x10	; 16
     cf4:	e0 e8       	ldi	r30, 0x80	; 128
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	de 01       	movw	r26, r28
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	01 90       	ld	r0, Z+
     cfe:	0d 92       	st	X+, r0
     d00:	8a 95       	dec	r24
     d02:	e1 f7       	brne	.-8      	; 0xcfc <BCM_Send+0x7e>
												UART_NO_PARITY, UART_8_BIT, 9600, BCM_SendUART_Cbk, NULL, NULL};
						UART_Init(&UART_Info);
     d04:	ce 01       	movw	r24, r28
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	0e 94 b4 03 	call	0x768	; 0x768 <UART_Init>
 * 							
 */
ERROR_STATUS 
BCM_Send(uint8 u8_BCM_ID, uint16 u16_BCM_Size, uint8 *u8ptr_BCM_Data)
{
	uint8 u8_retval = BCM_BASE_ERR + SUCCESS;
     d0c:	84 e6       	ldi	r24, 0x64	; 100
						gau8_BCM_StateMachineStatus[u8_BCM_ID] = BCM_STATE_TX_COMPLETE;
						gau8_BCM_BufferStatus[u8_BCM_ID] = BCM_BUFFER_LOCKED;
						UART_cfg_s UART_Info = {UART_INTERRUPT, TRANSMITTER, UART_NO_DOUBLE_SPEED, UART_ONE_STOP_BIT,\
												UART_NO_PARITY, UART_8_BIT, 9600, BCM_SendUART_Cbk, NULL, NULL};
						UART_Init(&UART_Info);
						break;
     d0e:	07 c0       	rjmp	.+14     	; 0xd1e <BCM_Send+0xa0>
					case BCM_SPI:
						u8_retval = BCM_BASE_ERR + NOT_SUPPORTED_ERR;
     d10:	80 e7       	ldi	r24, 0x70	; 112
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <BCM_Send+0xa0>
			u8_retval = BCM_BASE_ERR + RESOURCE_NOT_FOUND_ERR;
		}
	}
	else
	{
		u8_retval = BCM_BASE_ERR + NOT_INITIALIZED_ERR;
     d14:	86 e6       	ldi	r24, 0x66	; 102
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <BCM_Send+0xa0>
				u8_retval = BCM_BASE_ERR + RESOURCE_NOT_AVAILABLE_ERR;
			}
		} 
		else
		{
			u8_retval = BCM_BASE_ERR + RESOURCE_NOT_FOUND_ERR;
     d18:	89 e6       	ldi	r24, 0x69	; 105
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <BCM_Send+0xa0>
						break;
				}
			} 
			else
			{
				u8_retval = BCM_BASE_ERR + RESOURCE_NOT_AVAILABLE_ERR;
     d1c:	8f e6       	ldi	r24, 0x6F	; 111
	else
	{
		u8_retval = BCM_BASE_ERR + NOT_INITIALIZED_ERR;
	}
	return u8_retval;
}
     d1e:	60 96       	adiw	r28, 0x10	; 16
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <BCM_TxDispatcher>:
 * Description: This function controls the state machine for the Tx.
 * 							
 */
ERROR_STATUS 
BCM_TxDispatcher(void)
{
     d30:	2f 92       	push	r2
     d32:	3f 92       	push	r3
     d34:	4f 92       	push	r4
     d36:	5f 92       	push	r5
     d38:	6f 92       	push	r6
     d3a:	7f 92       	push	r7
     d3c:	8f 92       	push	r8
     d3e:	9f 92       	push	r9
     d40:	af 92       	push	r10
     d42:	bf 92       	push	r11
     d44:	cf 92       	push	r12
     d46:	df 92       	push	r13
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	00 d0       	rcall	.+0      	; 0xd56 <BCM_TxDispatcher+0x26>
     d56:	00 d0       	rcall	.+0      	; 0xd58 <BCM_TxDispatcher+0x28>
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
	uint8 u8_retval = BCM_BASE_ERR + SUCCESS;
	if (BCM_INIT == gu8_BCM_Status)
     d5c:	80 91 7b 00 	lds	r24, 0x007B
     d60:	81 11       	cpse	r24, r1
     d62:	db c0       	rjmp	.+438    	; 0xf1a <BCM_TxDispatcher+0x1ea>
     d64:	0f 2e       	mov	r0, r31
     d66:	f1 ec       	ldi	r31, 0xC1	; 193
     d68:	af 2e       	mov	r10, r31
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	bf 2e       	mov	r11, r31
     d6e:	f0 2d       	mov	r31, r0
     d70:	0f 2e       	mov	r0, r31
     d72:	fd eb       	ldi	r31, 0xBD	; 189
     d74:	cf 2e       	mov	r12, r31
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	df 2e       	mov	r13, r31
     d7a:	f0 2d       	mov	r31, r0
     d7c:	0f 2e       	mov	r0, r31
     d7e:	f3 ec       	ldi	r31, 0xC3	; 195
     d80:	ef 2e       	mov	r14, r31
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	ff 2e       	mov	r15, r31
     d86:	f0 2d       	mov	r31, r0
     d88:	0f eb       	ldi	r16, 0xBF	; 191
     d8a:	10 e0       	ldi	r17, 0x00	; 0
     d8c:	0f 2e       	mov	r0, r31
     d8e:	f9 eb       	ldi	r31, 0xB9	; 185
     d90:	8f 2e       	mov	r8, r31
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	9f 2e       	mov	r9, r31
     d96:	f0 2d       	mov	r31, r0
     d98:	0f 2e       	mov	r0, r31
     d9a:	f8 ec       	ldi	r31, 0xC8	; 200
     d9c:	4f 2e       	mov	r4, r31
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	5f 2e       	mov	r5, r31
     da2:	f0 2d       	mov	r31, r0
     da4:	0f 2e       	mov	r0, r31
     da6:	f7 eb       	ldi	r31, 0xB7	; 183
     da8:	6f 2e       	mov	r6, r31
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	7f 2e       	mov	r7, r31
     dae:	f0 2d       	mov	r31, r0
     db0:	0f 2e       	mov	r0, r31
     db2:	f3 ec       	ldi	r31, 0xC3	; 195
     db4:	2f 2e       	mov	r2, r31
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	3f 2e       	mov	r3, r31
     dba:	f0 2d       	mov	r31, r0
							UART_SendByte(gastr_BCM_Buffer[u8_index].u8_BCM_ID);
							gau8_BCM_StateMachineStatus[u8_index] = BCM_STATE_TX;
							break;
						case BCM_SEND_SIZE_HIGH:
							/* sending first byte of size*/
							gau8_BCM_TranceivingStatus[u8_index] = BCM_SEND_SIZE_LOW;
     dbc:	bc 82       	std	Y+4, r11	; 0x04
     dbe:	ab 82       	std	Y+3, r10	; 0x03
     dc0:	eb 81       	ldd	r30, Y+3	; 0x03
     dc2:	fc 81       	ldd	r31, Y+4	; 0x04
	if (BCM_INIT == gu8_BCM_Status)
	{
		uint8 u8_index;
		for (u8_index = 0; u8_index < BCM_MAX_CH_NUM; u8_index++)
		{
			if (BCM_BUFFER_LOCKED == gau8_BCM_BufferStatus[u8_index])
     dc4:	80 81       	ld	r24, Z
     dc6:	81 11       	cpse	r24, r1
     dc8:	8b c0       	rjmp	.+278    	; 0xee0 <BCM_TxDispatcher+0x1b0>
			{
				if (BCM_STATE_TX_COMPLETE == gau8_BCM_StateMachineStatus[u8_index])
     dca:	d8 01       	movw	r26, r16
     dcc:	8c 91       	ld	r24, X
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <BCM_TxDispatcher+0xa4>
     dd2:	86 c0       	rjmp	.+268    	; 0xee0 <BCM_TxDispatcher+0x1b0>
				{
					gu8_TempData[u8_index] = gastr_BCM_Buffer[u8_index].u8ptr_BCM_Data[gau16_BCM_SizeCounter[u8_index]];
     dd4:	d4 01       	movw	r26, r8
     dd6:	2d 91       	ld	r18, X+
     dd8:	3c 91       	ld	r19, X
     dda:	d7 01       	movw	r26, r14
     ddc:	13 96       	adiw	r26, 0x03	; 3
     dde:	8d 91       	ld	r24, X+
     de0:	9c 91       	ld	r25, X
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	dc 01       	movw	r26, r24
     de6:	a2 0f       	add	r26, r18
     de8:	b3 1f       	adc	r27, r19
     dea:	8c 91       	ld	r24, X
     dec:	d3 01       	movw	r26, r6
     dee:	8c 93       	st	X, r24
     df0:	da 82       	std	Y+2, r13	; 0x02
     df2:	c9 82       	std	Y+1, r12	; 0x01
					switch(gau8_BCM_TranceivingStatus[u8_index])
     df4:	d6 01       	movw	r26, r12
     df6:	9c 91       	ld	r25, X
     df8:	92 30       	cpi	r25, 0x02	; 2
     dfa:	39 f1       	breq	.+78     	; 0xe4a <BCM_TxDispatcher+0x11a>
     dfc:	28 f4       	brcc	.+10     	; 0xe08 <BCM_TxDispatcher+0xd8>
     dfe:	99 23       	and	r25, r25
     e00:	59 f0       	breq	.+22     	; 0xe18 <BCM_TxDispatcher+0xe8>
     e02:	91 30       	cpi	r25, 0x01	; 1
     e04:	a9 f0       	breq	.+42     	; 0xe30 <BCM_TxDispatcher+0x100>
     e06:	6c c0       	rjmp	.+216    	; 0xee0 <BCM_TxDispatcher+0x1b0>
     e08:	94 30       	cpi	r25, 0x04	; 4
     e0a:	09 f4       	brne	.+2      	; 0xe0e <BCM_TxDispatcher+0xde>
     e0c:	5a c0       	rjmp	.+180    	; 0xec2 <BCM_TxDispatcher+0x192>
     e0e:	48 f1       	brcs	.+82     	; 0xe62 <BCM_TxDispatcher+0x132>
     e10:	9a 30       	cpi	r25, 0x0A	; 10
     e12:	09 f4       	brne	.+2      	; 0xe16 <BCM_TxDispatcher+0xe6>
     e14:	61 c0       	rjmp	.+194    	; 0xed8 <BCM_TxDispatcher+0x1a8>
     e16:	64 c0       	rjmp	.+200    	; 0xee0 <BCM_TxDispatcher+0x1b0>
					{
						case BCM_SEND_ID:
							/* sending BCM ID*/
							gau8_BCM_TranceivingStatus[u8_index] = BCM_SEND_SIZE_HIGH;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	e9 81       	ldd	r30, Y+1	; 0x01
     e1c:	fa 81       	ldd	r31, Y+2	; 0x02
     e1e:	80 83       	st	Z, r24
							UART_SendByte(gastr_BCM_Buffer[u8_index].u8_BCM_ID);
     e20:	d7 01       	movw	r26, r14
     e22:	8c 91       	ld	r24, X
     e24:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_SendByte>
							gau8_BCM_StateMachineStatus[u8_index] = BCM_STATE_TX;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	f8 01       	movw	r30, r16
     e2c:	80 83       	st	Z, r24
							break;
     e2e:	58 c0       	rjmp	.+176    	; 0xee0 <BCM_TxDispatcher+0x1b0>
						case BCM_SEND_SIZE_HIGH:
							/* sending first byte of size*/
							gau8_BCM_TranceivingStatus[u8_index] = BCM_SEND_SIZE_LOW;
     e30:	e2 e0       	ldi	r30, 0x02	; 2
     e32:	a9 81       	ldd	r26, Y+1	; 0x01
     e34:	ba 81       	ldd	r27, Y+2	; 0x02
     e36:	ec 93       	st	X, r30
							UART_SendByte((uint8)(gastr_BCM_Buffer[u8_index].u16_BCM_Size >> 8));
     e38:	d7 01       	movw	r26, r14
     e3a:	12 96       	adiw	r26, 0x02	; 2
     e3c:	8c 91       	ld	r24, X
     e3e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_SendByte>
							gau8_BCM_StateMachineStatus[u8_index] = BCM_STATE_TX;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	f8 01       	movw	r30, r16
     e46:	80 83       	st	Z, r24
							break;
     e48:	4b c0       	rjmp	.+150    	; 0xee0 <BCM_TxDispatcher+0x1b0>
						case BCM_SEND_SIZE_LOW:
							/* sending last byte of size*/
							gau8_BCM_TranceivingStatus[u8_index] = BCM_SEND_DATA;
     e4a:	e3 e0       	ldi	r30, 0x03	; 3
     e4c:	d6 01       	movw	r26, r12
     e4e:	ec 93       	st	X, r30
							UART_SendByte((uint8)(gastr_BCM_Buffer[u8_index].u16_BCM_Size));
     e50:	d7 01       	movw	r26, r14
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	8c 91       	ld	r24, X
     e56:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_SendByte>
							gau8_BCM_StateMachineStatus[u8_index] = BCM_STATE_TX;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	f8 01       	movw	r30, r16
     e5e:	80 83       	st	Z, r24
							break;
     e60:	3f c0       	rjmp	.+126    	; 0xee0 <BCM_TxDispatcher+0x1b0>
						case BCM_SEND_DATA:
							if (gau16_BCM_SizeCounter[u8_index] < gastr_BCM_Buffer[u8_index].u16_BCM_Size - 1)
     e62:	d7 01       	movw	r26, r14
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	4d 91       	ld	r20, X+
     e68:	5c 91       	ld	r21, X
     e6a:	12 97       	sbiw	r26, 0x02	; 2
     e6c:	41 50       	subi	r20, 0x01	; 1
     e6e:	51 09       	sbc	r21, r1
     e70:	24 17       	cp	r18, r20
     e72:	35 07       	cpc	r19, r21
     e74:	98 f4       	brcc	.+38     	; 0xe9c <BCM_TxDispatcher+0x16c>
							{	
								/* sending data*/
								gau16_BCM_SizeCounter[u8_index]++;
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	f4 01       	movw	r30, r8
     e7c:	31 83       	std	Z+1, r19	; 0x01
     e7e:	20 83       	st	Z, r18
								gastr_BCM_Buffer[u8_index].u8_BCM_CheckSum += gu8_TempData[u8_index];
     e80:	d2 01       	movw	r26, r4
     e82:	9c 91       	ld	r25, X
     e84:	98 0f       	add	r25, r24
     e86:	9c 93       	st	X, r25
								gau8_BCM_TranceivingStatus[u8_index] = BCM_SEND_DATA;								
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	e9 81       	ldd	r30, Y+1	; 0x01
     e8c:	fa 81       	ldd	r31, Y+2	; 0x02
     e8e:	90 83       	st	Z, r25
								UART_SendByte(gu8_TempData[u8_index]);
     e90:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_SendByte>
								gau8_BCM_StateMachineStatus[u8_index] = BCM_STATE_TX;
     e94:	e1 e0       	ldi	r30, 0x01	; 1
     e96:	d8 01       	movw	r26, r16
     e98:	ec 93       	st	X, r30
								break;
     e9a:	22 c0       	rjmp	.+68     	; 0xee0 <BCM_TxDispatcher+0x1b0>
							} 
							else
							{
								/* sending last byte of data*/
								gau16_BCM_SizeCounter[u8_index]++;
     e9c:	2f 5f       	subi	r18, 0xFF	; 255
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	d4 01       	movw	r26, r8
     ea2:	2d 93       	st	X+, r18
     ea4:	3c 93       	st	X, r19
								gastr_BCM_Buffer[u8_index].u8_BCM_CheckSum += gu8_TempData[u8_index];
     ea6:	f2 01       	movw	r30, r4
     ea8:	90 81       	ld	r25, Z
     eaa:	98 0f       	add	r25, r24
     eac:	90 83       	st	Z, r25
								gau8_BCM_TranceivingStatus[u8_index] = BCM_SEND_CHECKSUM;
     eae:	e4 e0       	ldi	r30, 0x04	; 4
     eb0:	a9 81       	ldd	r26, Y+1	; 0x01
     eb2:	ba 81       	ldd	r27, Y+2	; 0x02
     eb4:	ec 93       	st	X, r30
								UART_SendByte(gu8_TempData[u8_index]);
     eb6:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_SendByte>
								gau8_BCM_StateMachineStatus[u8_index] = BCM_STATE_TX;
     eba:	e1 e0       	ldi	r30, 0x01	; 1
     ebc:	d8 01       	movw	r26, r16
     ebe:	ec 93       	st	X, r30
								break;	
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <BCM_TxDispatcher+0x1b0>
							}
						case BCM_SEND_CHECKSUM:
							/* sending checksum*/
							gau8_BCM_TranceivingStatus[u8_index] = BCM_SEND_END;
     ec2:	ea e0       	ldi	r30, 0x0A	; 10
     ec4:	a9 81       	ldd	r26, Y+1	; 0x01
     ec6:	ba 81       	ldd	r27, Y+2	; 0x02
     ec8:	ec 93       	st	X, r30
							UART_SendByte(gastr_BCM_Buffer[u8_index].u8_BCM_CheckSum);
     eca:	d2 01       	movw	r26, r4
     ecc:	8c 91       	ld	r24, X
     ece:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_SendByte>
							gau8_BCM_StateMachineStatus[u8_index] = BCM_STATE_IDLE;
     ed2:	f8 01       	movw	r30, r16
     ed4:	10 82       	st	Z, r1
							break;
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <BCM_TxDispatcher+0x1b0>
						case BCM_SEND_END:
							/*unlocking the resource*/
							gau8_BCM_BufferStatus[u8_index] = BCM_BUFFER_UNLOCKED;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 83       	st	Z, r24
							/* uart deinit*/
							UART_Deinit();
     edc:	0e 94 1a 05 	call	0xa34	; 0xa34 <UART_Deinit>
     ee0:	ab 81       	ldd	r26, Y+3	; 0x03
     ee2:	bc 81       	ldd	r27, Y+4	; 0x04
     ee4:	11 96       	adiw	r26, 0x01	; 1
     ee6:	bc 83       	std	Y+4, r27	; 0x04
     ee8:	ab 83       	std	Y+3, r26	; 0x03
     eea:	bf ef       	ldi	r27, 0xFF	; 255
     eec:	cb 1a       	sub	r12, r27
     eee:	db 0a       	sbc	r13, r27
     ef0:	e6 e0       	ldi	r30, 0x06	; 6
     ef2:	ee 0e       	add	r14, r30
     ef4:	f1 1c       	adc	r15, r1
     ef6:	0f 5f       	subi	r16, 0xFF	; 255
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	f2 e0       	ldi	r31, 0x02	; 2
     efc:	8f 0e       	add	r8, r31
     efe:	91 1c       	adc	r9, r1
     f00:	86 e0       	ldi	r24, 0x06	; 6
     f02:	48 0e       	add	r4, r24
     f04:	51 1c       	adc	r5, r1
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	69 1a       	sub	r6, r25
     f0a:	79 0a       	sbc	r7, r25
{
	uint8 u8_retval = BCM_BASE_ERR + SUCCESS;
	if (BCM_INIT == gu8_BCM_Status)
	{
		uint8 u8_index;
		for (u8_index = 0; u8_index < BCM_MAX_CH_NUM; u8_index++)
     f0c:	ab 81       	ldd	r26, Y+3	; 0x03
     f0e:	bc 81       	ldd	r27, Y+4	; 0x04
     f10:	a2 15       	cp	r26, r2
     f12:	b3 05       	cpc	r27, r3
     f14:	09 f0       	breq	.+2      	; 0xf18 <BCM_TxDispatcher+0x1e8>
     f16:	54 cf       	rjmp	.-344    	; 0xdc0 <BCM_TxDispatcher+0x90>
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <BCM_TxDispatcher+0x1ee>
			}
		}
	}
	else
	{
		u8_retval = BCM_BASE_ERR + NOT_INITIALIZED_ERR;
     f1a:	86 e6       	ldi	r24, 0x66	; 102
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <BCM_TxDispatcher+0x1f0>
 * 							
 */
ERROR_STATUS 
BCM_TxDispatcher(void)
{
	uint8 u8_retval = BCM_BASE_ERR + SUCCESS;
     f1e:	84 e6       	ldi	r24, 0x64	; 100
	else
	{
		u8_retval = BCM_BASE_ERR + NOT_INITIALIZED_ERR;
	}
	return u8_retval;
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	5f 90       	pop	r5
     f46:	4f 90       	pop	r4
     f48:	3f 90       	pop	r3
     f4a:	2f 90       	pop	r2
     f4c:	08 95       	ret

00000f4e <TIMER_CBK>:

void 
TIMER_CBK(void)
{
	/* resetting the timer */
	Timer_Start(gu8_TMU_TIMER_CH, gu16_TMU_TimerCount);
     f4e:	60 91 17 01 	lds	r22, 0x0117
     f52:	70 91 18 01 	lds	r23, 0x0118
     f56:	80 91 19 01 	lds	r24, 0x0119
     f5a:	0e 94 b0 02 	call	0x560	; 0x560 <Timer_Start>
	gu8_TMU_DispatcherFlag = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 16 01 	sts	0x0116, r24
     f64:	08 95       	ret

00000f66 <TMU_Init>:
 * Description: This function initializes the TMU module.
 * 							
 */
ERROR_STATUS 
TMU_Init(void)
{
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <TMU_Init+0x6>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <TMU_Init+0x8>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <TMU_Init+0xa>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	uint8 u8_retval = TMU_BASE_ERR + SUCCESS;
	if (gu8_TMU_Status == TMU_UNINIT)
     f74:	80 91 7d 00 	lds	r24, 0x007D
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	b1 f5       	brne	.+108    	; 0xfe8 <TMU_Init+0x82>
	{
		/* TIMER INIT*/
		Timer_cfg_s Timer_info;
		switch(TMU_Info.u8_TMU_TimerID)
     f7c:	80 91 7e 00 	lds	r24, 0x007E
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	41 f0       	breq	.+16     	; 0xf94 <TMU_Init+0x2e>
     f84:	18 f0       	brcs	.+6      	; 0xf8c <TMU_Init+0x26>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	51 f0       	breq	.+20     	; 0xf9e <TMU_Init+0x38>
     f8a:	0d c0       	rjmp	.+26     	; 0xfa6 <TMU_Init+0x40>
		{
			case TMU_CH0:
				Timer_info.Timer_CH_NO = TIMER_CH0;
     f8c:	19 82       	std	Y+1, r1	; 0x01
				gu8_TMU_TIMER_CH = TIMER_CH0;
     f8e:	10 92 19 01 	sts	0x0119, r1
				break;
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <TMU_Init+0x40>
			case TMU_CH1:
				Timer_info.Timer_CH_NO = TIMER_CH1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	89 83       	std	Y+1, r24	; 0x01
				gu8_TMU_TIMER_CH = TIMER_CH1;
     f98:	80 93 19 01 	sts	0x0119, r24
				break;	
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <TMU_Init+0x40>
			case TMU_CH2:
				Timer_info.Timer_CH_NO = TIMER_CH2;
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	89 83       	std	Y+1, r24	; 0x01
				gu8_TMU_TIMER_CH = TIMER_CH2;
     fa2:	80 93 19 01 	sts	0x0119, r24
				break;			 
		} 
		Timer_info.Timer_Mode = TIMER_MODE;
     fa6:	1a 82       	std	Y+2, r1	; 0x02
		Timer_info.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	8b 83       	std	Y+3, r24	; 0x03
		Timer_info.Timer_Prescaler = TIMER_PRESCALER_1024;
     fac:	87 e0       	ldi	r24, 0x07	; 7
     fae:	8c 83       	std	Y+4, r24	; 0x04
		Timer_info.Timer_Cbk_ptr = TIMER_CBK;
     fb0:	87 ea       	ldi	r24, 0xA7	; 167
     fb2:	97 e0       	ldi	r25, 0x07	; 7
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
		Timer_Init(&Timer_info);
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	0e 94 91 01 	call	0x322	; 0x322 <Timer_Init>
		gu16_TMU_TimerCount = (TMU_Info.u8_TMU_Resolution * 16000U) / 1024U;
     fc0:	40 91 7f 00 	lds	r20, 0x007F
     fc4:	20 e8       	ldi	r18, 0x80	; 128
     fc6:	3e e3       	ldi	r19, 0x3E	; 62
     fc8:	42 9f       	mul	r20, r18
     fca:	c0 01       	movw	r24, r0
     fcc:	43 9f       	mul	r20, r19
     fce:	90 0d       	add	r25, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	89 2f       	mov	r24, r25
     fd4:	86 95       	lsr	r24
     fd6:	86 95       	lsr	r24
     fd8:	80 93 17 01 	sts	0x0117, r24
     fdc:	10 92 18 01 	sts	0x0118, r1
		gu8_TMU_Status = TMU_INIT;
     fe0:	10 92 7d 00 	sts	0x007D, r1
 * 							
 */
ERROR_STATUS 
TMU_Init(void)
{
	uint8 u8_retval = TMU_BASE_ERR + SUCCESS;
     fe4:	88 e7       	ldi	r24, 0x78	; 120
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <TMU_Init+0x84>
		gu16_TMU_TimerCount = (TMU_Info.u8_TMU_Resolution * 16000U) / 1024U;
		gu8_TMU_Status = TMU_INIT;
	}
	else
	{
		u8_retval = TMU_BASE_ERR + ALREADY_INITIALIZED_ERR;
     fe8:	8b e7       	ldi	r24, 0x7B	; 123
	}
	return u8_retval;
}
     fea:	26 96       	adiw	r28, 0x06	; 6
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <TMU_Start>:
 */
ERROR_STATUS 
TMU_Start(void(*FUNC_PTR)(void), uint16 u16_period, uint8 u8_repeat)
{
	uint8 u8_retval = TMU_BASE_ERR + SUCCESS;
	if (gu8_TMU_Status == TMU_INIT)
     ffc:	20 91 7d 00 	lds	r18, 0x007D
    1000:	21 11       	cpse	r18, r1
    1002:	24 c0       	rjmp	.+72     	; 0x104c <TMU_Start+0x50>
	{
		if (NULL != FUNC_PTR)
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	21 f1       	breq	.+72     	; 0x1050 <TMU_Start+0x54>
		{
			/* adding func to buffer*/
			str_TMU_Request_t TMU_Request = {0, u16_period, FUNC_PTR, u8_repeat};
			gastr_TMU_Buffer[gu8_bufferCounter] = TMU_Request;
    1008:	20 91 cf 00 	lds	r18, 0x00CF
    100c:	37 e0       	ldi	r19, 0x07	; 7
    100e:	23 9f       	mul	r18, r19
    1010:	f0 01       	movw	r30, r0
    1012:	11 24       	eor	r1, r1
    1014:	e0 53       	subi	r30, 0x30	; 48
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	11 82       	std	Z+1, r1	; 0x01
    101a:	10 82       	st	Z, r1
    101c:	73 83       	std	Z+3, r23	; 0x03
    101e:	62 83       	std	Z+2, r22	; 0x02
    1020:	95 83       	std	Z+5, r25	; 0x05
    1022:	84 83       	std	Z+4, r24	; 0x04
    1024:	46 83       	std	Z+6, r20	; 0x06
			gu8_bufferCounter++;
    1026:	2f 5f       	subi	r18, 0xFF	; 255
    1028:	20 93 cf 00 	sts	0x00CF, r18
		}
		else
		{
			return E_NOK;
		}
		if (gu8_timerStarted == NOT_STARTED)
    102c:	80 91 7c 00 	lds	r24, 0x007C
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	81 f4       	brne	.+32     	; 0x1054 <TMU_Start+0x58>
		{
			/*getting the module into starting state "happens first time only"*/
			Timer_Start(gu8_TMU_TIMER_CH, gu16_TMU_TimerCount);
    1034:	60 91 17 01 	lds	r22, 0x0117
    1038:	70 91 18 01 	lds	r23, 0x0118
    103c:	80 91 19 01 	lds	r24, 0x0119
    1040:	0e 94 b0 02 	call	0x560	; 0x560 <Timer_Start>
			gu8_timerStarted = STARTED;
    1044:	10 92 7c 00 	sts	0x007C, r1
 * 							
 */
ERROR_STATUS 
TMU_Start(void(*FUNC_PTR)(void), uint16 u16_period, uint8 u8_repeat)
{
	uint8 u8_retval = TMU_BASE_ERR + SUCCESS;
    1048:	88 e7       	ldi	r24, 0x78	; 120
    104a:	08 95       	ret
			
		}
	} 
	else
	{
		u8_retval = TMU_BASE_ERR + NOT_INITIALIZED_ERR;
    104c:	8a e7       	ldi	r24, 0x7A	; 122
    104e:	08 95       	ret
			gastr_TMU_Buffer[gu8_bufferCounter] = TMU_Request;
			gu8_bufferCounter++;
		}
		else
		{
			return E_NOK;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	08 95       	ret
 * 							
 */
ERROR_STATUS 
TMU_Start(void(*FUNC_PTR)(void), uint16 u16_period, uint8 u8_repeat)
{
	uint8 u8_retval = TMU_BASE_ERR + SUCCESS;
    1054:	88 e7       	ldi	r24, 0x78	; 120
	else
	{
		u8_retval = TMU_BASE_ERR + NOT_INITIALIZED_ERR;
	}
	return u8_retval;
}
    1056:	08 95       	ret

00001058 <TMU_Dispatcher>:
 * Description: This function checks if any function is due and calls it.
 * 							
 */
ERROR_STATUS 
TMU_Dispatcher(void)
{
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
	uint8 u8_retval = TMU_BASE_ERR + SUCCESS;
	if (TMU_INIT == gu8_TMU_Status)
    1064:	80 91 7d 00 	lds	r24, 0x007D
    1068:	81 11       	cpse	r24, r1
    106a:	5d c0       	rjmp	.+186    	; 0x1126 <TMU_Dispatcher+0xce>
	{
		if (1 == gu8_TMU_DispatcherFlag)
    106c:	80 91 16 01 	lds	r24, 0x0116
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	09 f0       	breq	.+2      	; 0x1076 <TMU_Dispatcher+0x1e>
    1074:	5a c0       	rjmp	.+180    	; 0x112a <TMU_Dispatcher+0xd2>
		{
			uint8 i;
			for (i = 0; i < gu8_bufferCounter; i++)
    1076:	80 91 cf 00 	lds	r24, 0x00CF
    107a:	88 23       	and	r24, r24
    107c:	09 f4       	brne	.+2      	; 0x1080 <TMU_Dispatcher+0x28>
    107e:	48 c0       	rjmp	.+144    	; 0x1110 <TMU_Dispatcher+0xb8>
    1080:	f1 2c       	mov	r15, r1
					gastr_TMU_Buffer[i].Func_PTR();
					gastr_TMU_Buffer[i].u16_counter = 0;
					if (ONE_TIME == gastr_TMU_Buffer[i].u8_repeat)
					{
						/* removing the one shot func after excution */
						gastr_TMU_Buffer[i] = gastr_TMU_Buffer[gu8_bufferCounter];
    1082:	0f 2e       	mov	r0, r31
    1084:	f7 e0       	ldi	r31, 0x07	; 7
    1086:	ef 2e       	mov	r14, r31
    1088:	f0 2d       	mov	r31, r0
		{
			uint8 i;
			for (i = 0; i < gu8_bufferCounter; i++)
			{
				/* increamenting func counter */
				gastr_TMU_Buffer[i].u16_counter++;
    108a:	cf 2d       	mov	r28, r15
    108c:	d0 e0       	ldi	r29, 0x00	; 0
    108e:	87 e0       	ldi	r24, 0x07	; 7
    1090:	f8 9e       	mul	r15, r24
    1092:	f0 01       	movw	r30, r0
    1094:	11 24       	eor	r1, r1
    1096:	e0 53       	subi	r30, 0x30	; 48
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
				if (gastr_TMU_Buffer[i].u16_counter == gastr_TMU_Buffer[i].u16_period)
    10a4:	22 81       	ldd	r18, Z+2	; 0x02
    10a6:	33 81       	ldd	r19, Z+3	; 0x03
    10a8:	82 17       	cp	r24, r18
    10aa:	93 07       	cpc	r25, r19
    10ac:	49 f5       	brne	.+82     	; 0x1100 <TMU_Dispatcher+0xa8>
				{
					/* excuting func when the delay period ends*/
					gastr_TMU_Buffer[i].Func_PTR();
    10ae:	8e 01       	movw	r16, r28
    10b0:	00 0f       	add	r16, r16
    10b2:	11 1f       	adc	r17, r17
    10b4:	00 0f       	add	r16, r16
    10b6:	11 1f       	adc	r17, r17
    10b8:	00 0f       	add	r16, r16
    10ba:	11 1f       	adc	r17, r17
    10bc:	0c 1b       	sub	r16, r28
    10be:	1d 0b       	sbc	r17, r29
    10c0:	00 53       	subi	r16, 0x30	; 48
    10c2:	1f 4f       	sbci	r17, 0xFF	; 255
    10c4:	d8 01       	movw	r26, r16
    10c6:	14 96       	adiw	r26, 0x04	; 4
    10c8:	ed 91       	ld	r30, X+
    10ca:	fc 91       	ld	r31, X
    10cc:	15 97       	sbiw	r26, 0x05	; 5
    10ce:	09 95       	icall
					gastr_TMU_Buffer[i].u16_counter = 0;
    10d0:	f8 01       	movw	r30, r16
    10d2:	11 82       	std	Z+1, r1	; 0x01
    10d4:	10 82       	st	Z, r1
					if (ONE_TIME == gastr_TMU_Buffer[i].u8_repeat)
    10d6:	86 81       	ldd	r24, Z+6	; 0x06
    10d8:	81 11       	cpse	r24, r1
    10da:	12 c0       	rjmp	.+36     	; 0x1100 <TMU_Dispatcher+0xa8>
					{
						/* removing the one shot func after excution */
						gastr_TMU_Buffer[i] = gastr_TMU_Buffer[gu8_bufferCounter];
    10dc:	80 91 cf 00 	lds	r24, 0x00CF
    10e0:	d8 01       	movw	r26, r16
    10e2:	97 e0       	ldi	r25, 0x07	; 7
    10e4:	89 9f       	mul	r24, r25
    10e6:	f0 01       	movw	r30, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	e0 53       	subi	r30, 0x30	; 48
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	9e 2d       	mov	r25, r14
    10f0:	01 90       	ld	r0, Z+
    10f2:	0d 92       	st	X+, r0
    10f4:	9a 95       	dec	r25
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <TMU_Dispatcher+0x98>
						gu8_bufferCounter--;
    10f8:	81 50       	subi	r24, 0x01	; 1
    10fa:	80 93 cf 00 	sts	0x00CF, r24
						i--;
    10fe:	fa 94       	dec	r15
	if (TMU_INIT == gu8_TMU_Status)
	{
		if (1 == gu8_TMU_DispatcherFlag)
		{
			uint8 i;
			for (i = 0; i < gu8_bufferCounter; i++)
    1100:	f3 94       	inc	r15
    1102:	80 91 cf 00 	lds	r24, 0x00CF
    1106:	f8 16       	cp	r15, r24
    1108:	08 f4       	brcc	.+2      	; 0x110c <TMU_Dispatcher+0xb4>
    110a:	bf cf       	rjmp	.-130    	; 0x108a <TMU_Dispatcher+0x32>
				else
				{
					
				}
			}
			if (gu8_bufferCounter == 0)
    110c:	81 11       	cpse	r24, r1
    110e:	07 c0       	rjmp	.+14     	; 0x111e <TMU_Dispatcher+0xc6>
			{
				/* getting module into stop state "happens when buffer is empty only"
				 in this case it may happen due to having only ONESHOT funcs in the buffer*/
				Timer_Stop(gu8_TMU_TIMER_CH);
    1110:	80 91 19 01 	lds	r24, 0x0119
    1114:	0e 94 10 03 	call	0x620	; 0x620 <Timer_Stop>
				gu8_timerStarted = NOT_STARTED;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 93 7c 00 	sts	0x007C, r24
			}
			else
			{
						
			}
			gu8_TMU_DispatcherFlag = 0;
    111e:	10 92 16 01 	sts	0x0116, r1
 * 							
 */
ERROR_STATUS 
TMU_Dispatcher(void)
{
	uint8 u8_retval = TMU_BASE_ERR + SUCCESS;
    1122:	88 e7       	ldi	r24, 0x78	; 120
    1124:	03 c0       	rjmp	.+6      	; 0x112c <TMU_Dispatcher+0xd4>
			
		}
	} 
	else
	{
		u8_retval = TMU_BASE_ERR + NOT_INITIALIZED_ERR;
    1126:	8a e7       	ldi	r24, 0x7A	; 122
    1128:	01 c0       	rjmp	.+2      	; 0x112c <TMU_Dispatcher+0xd4>
 * 							
 */
ERROR_STATUS 
TMU_Dispatcher(void)
{
	uint8 u8_retval = TMU_BASE_ERR + SUCCESS;
    112a:	88 e7       	ldi	r24, 0x78	; 120
	else
	{
		u8_retval = TMU_BASE_ERR + NOT_INITIALIZED_ERR;
	}
	return u8_retval;
}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	08 95       	ret

0000113a <__udivmodsi4>:
    113a:	a1 e2       	ldi	r26, 0x21	; 33
    113c:	1a 2e       	mov	r1, r26
    113e:	aa 1b       	sub	r26, r26
    1140:	bb 1b       	sub	r27, r27
    1142:	fd 01       	movw	r30, r26
    1144:	0d c0       	rjmp	.+26     	; 0x1160 <__udivmodsi4_ep>

00001146 <__udivmodsi4_loop>:
    1146:	aa 1f       	adc	r26, r26
    1148:	bb 1f       	adc	r27, r27
    114a:	ee 1f       	adc	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	a2 17       	cp	r26, r18
    1150:	b3 07       	cpc	r27, r19
    1152:	e4 07       	cpc	r30, r20
    1154:	f5 07       	cpc	r31, r21
    1156:	20 f0       	brcs	.+8      	; 0x1160 <__udivmodsi4_ep>
    1158:	a2 1b       	sub	r26, r18
    115a:	b3 0b       	sbc	r27, r19
    115c:	e4 0b       	sbc	r30, r20
    115e:	f5 0b       	sbc	r31, r21

00001160 <__udivmodsi4_ep>:
    1160:	66 1f       	adc	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	88 1f       	adc	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	1a 94       	dec	r1
    116a:	69 f7       	brne	.-38     	; 0x1146 <__udivmodsi4_loop>
    116c:	60 95       	com	r22
    116e:	70 95       	com	r23
    1170:	80 95       	com	r24
    1172:	90 95       	com	r25
    1174:	9b 01       	movw	r18, r22
    1176:	ac 01       	movw	r20, r24
    1178:	bd 01       	movw	r22, r26
    117a:	cf 01       	movw	r24, r30
    117c:	08 95       	ret

0000117e <__tablejump2__>:
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31

00001182 <__tablejump__>:
    1182:	05 90       	lpm	r0, Z+
    1184:	f4 91       	lpm	r31, Z
    1186:	e0 2d       	mov	r30, r0
    1188:	09 94       	ijmp

0000118a <_exit>:
    118a:	f8 94       	cli

0000118c <__stop_program>:
    118c:	ff cf       	rjmp	.-2      	; 0x118c <__stop_program>
